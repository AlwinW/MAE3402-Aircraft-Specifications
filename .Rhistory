Seg1 = 0
}
#--- 2nd Segment Climb
Seg2inp <- inp %>%
mutate(
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2,
Vconst = 1.2*VsTO
)
Seg2 <- integrate(function(h)
ClimbEnergy(Seg2inp, h, energycalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps
)[[1]]
#--- 3rd Segment Acceleration
Seg3inp <- inp %>%
mutate(
h = inp$AltFlaps,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)[[1]]
# 4th Segment Climb
Seg4inp <- inp %>%
mutate(
Cd0 = Cd0clean,
Ne = 2,
Vconst = 0
)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  inp$AltFlaps, upper = inp$AltCruise
)[[1]]
#--- 3rd Segment Acceleration
Seg3inp <- inp %>%
mutate(
h = inp$AltFlaps,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)[[1]]
#--- 3rd Segment Acceleration
Seg3inp <- inp %>%
mutate(
h = inp$AltFlaps,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3inp <- inp %>%
mutate(
h = AltFlaps,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3inp <- inp %>%
mutate(
h = AltFlaps,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)[[1]]
Seg4inp <- inp %>%
mutate(
Cd0 = Cd0clean,
Ne = 2,
Vconst = 0
)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  inp$AltFlaps, upper = inp$AltCruise
)[[1]]
--- Critical h Value
Desc <- mutate(inp, Cd0 = Cd0clean + 2*Cd0propfea)
hcrit = ModifiedSecant(function(h)
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, accelonly = TRUE),
xr = 1000, del = 0.001, toler = 0.01, positive = TRUE)
hcrit = max(hcrit, inp$AltFlaps)
#--- Zero Acceleration
timecrit = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = hcrit
)[[1]]
#--- Critical h Value
Desc <- mutate(inp, Cd0 = Cd0clean + 2*Cd0propfea)
hcrit = ModifiedSecant(function(h)
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, accelonly = TRUE),
xr = 1000, del = 0.001, toler = 0.01, positive = TRUE)
hcrit = max(hcrit, inp$AltFlaps)
#--- Zero Acceleration
timecrit = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = hcrit
)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, Vvonly = TRUE),
lower = hcrit, upper = inp$AltFlaps
)[[1]]
integrate(function(h)
1/DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, Vvonly = TRUE),
lower = hcrit, upper = inp$AltFlaps
)
debug(DescentRatesFunction)
Desc <- mutate(inp, Cd0 = Cd0clean + 2*Cd0propfea)
integrate(function(h)
1/DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, Vvonly = TRUE),
lower = hcrit, upper = inp$AltFlaps
)
Vv
accel
integrate(function(h)
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, accelonly = TRUE),
lower = hcrit, upper = inp$AltFlaps
)[[1]]
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, accelonly = TRUE)
undebug(DescentRatesFunction)
Desc <- mutate(inp, Cd0 = Cd0clean + 2*Cd0propfea)
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, h, Desc$Vcruise, Desc$DescAngle, accelonly = TRUE)
DescentRatesFunction(Desc$Cd0, Desc$K, Desc$W, Desc$m, Desc$S, 300, Desc$Vcruise, Desc$DescAngle, accelonly = TRUE)
integrate
time = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
timecrit = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = hcrit
)[[1]]
Desc <- mutate(inp, Cd0 = Cd0clean + 2*Cd0propfea)
timecrit = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = hcrit
)[[1]]
timecrit = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = hcrit
)[[1]]
Desc
View(Desc)
debugSource('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
debugSource('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
undebug(DescentZeroAccel)
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
timecrit = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = hcrit
)[[1]]
timecrit
time = integrate(function(h)
DescentZeroAccel(Desc, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
time
Desc = time * PA(inp$Pshafteng, 2, inp$Vcruise)
Desc
Desc = time * PA(inp$Pshafteng, 2, inp$Vcruise) * 0.05
energysummary <- data.frame(
TOgr = TOgr,
TOtr = TOtr,
Seg1 = Seg1,
Seg2 = Seg2,
Seg3 = Seg3,
Seg4 = Seg4,
Desc = Desc
)
energysummary
energysummary/1e6
mutate(inp, h = Altcruise)
Cruiseinp <- mutate(inp, h = AltCruise) %>%
StandardAtomsphere(.) %>%
mutate(
Vinf = Vcruise,
qinf = 1/2 * rho * Vinf^2,
Cl = W/(qinf * S),
Cd0 = Cd0clean,
Cd = Cd0 + K * Cl^2,
D = qinf * S * Cd
)
Cruise = Cruiseinp$TR * Cruiseinp$Range
Cruise
Cruiseinp <- mutate(inp, h = AltCruise) %>%
StandardAtomsphere(.) %>%
mutate(
Vinf = Vcruise,
qinf = 1/2 * rho * Vinf^2,
Cl = W/(qinf * S),
Cd0 = Cd0clean,
Cd = Cd0 + K * Cl^2,
D = qinf * S * Cd,
TR = D,
PR = TR * Vinf,
etaprop = etaprop(Vinf)
)
Cruise = Cruiseinp$TR * Cruiseinp$Range
Cruise
Cruise = Cruiseinp$TR / Cruiseinp$etaprop * Cruiseinp$Range
energysummary <- data.frame(
TOgr = TOgr,
TOtr = TOtr,
Seg1 = Seg1,
Seg2 = Seg2,
Seg3 = Seg3,
Seg4 = Seg4,
Cruise = Cruise,
Desc = Desc
)
sum(energysummary/inp$E/inp$etamech)
Cruise = Cruiseinp$TR / Cruiseinp$etaprop * Cruiseinp$Range * 0.9
energysummary <- data.frame(
TOgr = TOgr,
TOtr = TOtr,
Seg1 = Seg1,
Seg2 = Seg2,
Seg3 = Seg3,
Seg4 = Seg4,
Cruise = Cruise,
Desc = Desc
)
sum(energysummary/inp$E/inp$etamech)
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO
TOtr = AirDistanceall$Sair
Seg2 = integrate(function(h) 1.2*inp$VsTO/ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Seg2 = integrate(function(h) 1.2*inp$VsTO/ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
Seg3 = integrate(function(V) V/AccelerateEnergy(Seg3inp, V, distancecalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a)[[1]]
Seg4 = integrate(function(h) inp$Mach*Seg3inp$a/ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]]
ggplot(Climboutput, aes(x=Vinf, y=PerGrad, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
geom_hline(aes(yintercept = 1.5, colour = "2nd Seg OEI")) +
geom_text(aes(x = min(Vinf), y = 1.5, colour = "2nd Seg OEI"),
label = "Minimum 2nd Seg Climb OEI", hjust = 0, vjust = 1.5,
show.legend = FALSE) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "Percentage Graidents", x = "Vinf (m/s)", y = "Percentage Gradient (%)",
colour = "Mission Segment", shape = "Velocity")) +
ylim(-10, NA)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
ggplot(Climboutput, aes(x=Vinf, y=PerGrad, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
geom_hline(aes(yintercept = 1.5, colour = "2nd Seg OEI")) +
geom_text(aes(x = min(Vinf), y = 1.5, colour = "2nd Seg OEI"),
label = "Minimum 2nd Seg Climb OEI", hjust = 0, vjust = 1.5,
show.legend = FALSE) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "Percentage Graidents", x = "Vinf (m/s)", y = "Percentage Gradient (%)",
colour = "Mission Segment", shape = "Velocity")) +
ylim(-10, NA)
ggplot(Climboutput, aes(x=Vinf, y = ClimbRate / 0.3 * 60, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
geom_hline(aes(yintercept = 100, colour = "Ceiling")) +
geom_text(aes(x = min(Vinf), y = 100, colour = "Ceiling"),
label = "Minimum Ceiling Rate of Climb", hjust = 0, vjust = 1.5,
show.legend = FALSE) +
geom_hline(aes(yintercept = 300, colour = "Cruise")) +
geom_text(aes(x = min(Vinf), y = 300, colour = "Cruise"),
label = "Minimum Cruise Rate of Climb", hjust = 0, vjust = 1.5,
show.legend = FALSE) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "Climb Rates (Vv)", x = "Vinf (m/s)", y = "Climb Rate (ft/min)",
colour = "Mission Segment", shape = "Velocity")) +
ylim(-10, NA)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
Distances <- data.frame(
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO,
TOtr = AirDistanceall$Sair,
Seg2 = integrate(function(h) 1.2*inp$VsTO/ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]],
Seg3 = integrate(function(V) V/AccelerateEnergy(Seg3inp, V, distancecalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a)[[1]],
Seg4 = integrate(function(h) inp$Mach*Seg3inp$a/ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]],
Descent = 1 #i was meant to use the horizontal velocities above!!
)
Distances
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Distances
Seg2 = integrate(function(h) 1.2*inp$VsTO/ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
ClimbRatesFunction
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Distances
Distances
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO
TOgr
integrate(function(h) 1.2*inp$VsTO/ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
ClimbEnergy <- function(inp, h, energycalc = FALSE, sinonly = FALSE, distancecalc = FALSE) {
inph <- RepeatRows(inp, length(h))
inph$h <- h
inph <- StandardAtomsphere(inph) %>%
mutate(
Vinf = ifelse(Vconst != 0, Vconst, Mach*a),
etaprop = etaprop(Vinf),
PA = PA(Pshafteng, Ne, Vinf)) %>%
rowwise() %>%
do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup() %>%
mutate(
qinf = 1/2 * rho * Vinf^2,
Cl = nload *W/(qinf * S),
Cd = Cd0 + K * Cl^2,
D = Cd * qinf * S,
TR = D + W * SinTheta,
PR = TR * Vinf,
P_Vv = (PR/etaprop)/ClimbRate,
accel = TR/m,
Vh = Vinf*cos(Thetadeg * pi/180),
distcalc = Vinf/ClimbRate
)
data.frame(inph)
if (energycalc == TRUE)
return(inph$P_Vv)
else if (sinonly == TRUE)
return(inph$SinTheta)
else if (distancecalc == TRUE)
return(inph$distcalc)
}
integrate(function(h) 1.2*inp$VsTO/ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
integrate(function(h) ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
ClimbEnergy <- function(inp, h, energycalc = FALSE, sinonly = FALSE, distancecalc = FALSE) {
inph <- RepeatRows(inp, length(h))
inph$h <- h
inph <- StandardAtomsphere(inph) %>%
mutate(
Vinf = ifelse(Vconst != 0, Vconst, Mach*a),
etaprop = etaprop(Vinf),
PA = PA(Pshafteng, Ne, Vinf)) %>%
rowwise() %>%
do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup() %>%
mutate(
qinf = 1/2 * rho * Vinf^2,
Cl = nload *W/(qinf * S),
Cd = Cd0 + K * Cl^2,
D = Cd * qinf * S,
TR = D + W * SinTheta,
PR = TR * Vinf,
P_Vv = (PR/etaprop)/ClimbRate,
accel = TR/m,
Vh = Vinf*cos(Thetadeg * pi/180),
distcalc = Vh/ClimbRate
)
data.frame(inph)
if (energycalc == TRUE)
return(inph$P_Vv)
else if (sinonly == TRUE)
return(inph$SinTheta)
else if (distancecalc == TRUE)
return(inph$distcalc)
}
integrate(function(h) ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]]
Seg4inp
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Distances
data.frame(
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO,
TOtr = AirDistanceall$Sair,
Seg2 = integrate(function(h) ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]],
Seg3 = integrate(function(V) V/AccelerateEnergy(Seg3inp, V, distancecalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a)[[1]],
Seg4 = integrate(function(h) ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]],
Descent = 1 #i was meant to use the horizontal velocities above!!
)
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
Descinp <- mutate(inp, Cd0 = Cd0clean + 2*Cd0propfea)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, distancecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
Desc
Desctime
Desctime = integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
Desctime
596.3298 * 82
Distances <- data.frame(
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO,
TOtr = AirDistanceall$Sair,
Seg2 = integrate(function(h) ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]],
Seg3 = integrate(function(V) V/AccelerateEnergy(Seg3inp, V, distancecalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a)[[1]],
Seg4 = integrate(function(h) ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]],
Desc= integrate(function(h) ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]],
DescFlaps = integrate(function(V)
V/AccelerateEnergy(DescFlapsinp, V, distancecalc = TRUE),
lower =  1.3*inp$VsLD, upper = inp$Mach*DescFlapsinp$a)[[1]]
)
#--- Time Required for Descinpent
Desctime = integrate(function(h)
DescentZeroAccel(Descinp, h, inp$Vcruise, timecalc = TRUE),
lower = inp$AltCruise, upper = inp$AltFlaps
)[[1]]
#--- Approximate Power Required (5% Reserve)
Desc = (Desctime) * PA(inp$Pshafteng, 2, inp$Vcruise)/etaprop(inp$Vcruise) * 0.05
#--- Flaps
DescFlapsinp <- inp %>%
mutate(
h = AltFlaps,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 0
)  %>%
StandardAtomsphere(.)
DescFlapstime <- integrate(function(V)
1/ AccelerateEnergy(DescFlapsinp, V, distancecalc = TRUE),
lower =  1.3*inp$VsLD, upper = inp$Mach*DescFlapsinp$a)[[1]]
#--- Approximate Power Required (5% Reserve)
DescFlaps = (DescFlapstime) * PA(inp$Pshafteng, 2, 1.3*inp$VsLD)/etaprop(1.3*inp$VsLD) * 0.05
Distances <- data.frame(
TOgr = integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V, distancecalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO)[[1]] + 3 * 1.1*inp$VsTO,
TOtr = AirDistanceall$Sair,
Seg2 = integrate(function(h) ClimbEnergy(Seg2inp, h, distancecalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = inp$AltFlaps)[[1]],
Seg3 = integrate(function(V) V/AccelerateEnergy(Seg3inp, V, distancecalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a)[[1]],
Seg4 = integrate(function(h) ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]],
Desc= integrate(function(h) ClimbEnergy(Seg4inp, h, distancecalc = TRUE),
inp$AltFlaps, upper = inp$AltCruise)[[1]],
DescFlaps = integrate(function(V)
V/AccelerateEnergy(DescFlapsinp, V, distancecalc = TRUE),
lower =  1.3*inp$VsLD, upper = inp$Mach*DescFlapsinp$a)[[1]]
)
Distances
