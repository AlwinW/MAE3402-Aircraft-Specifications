Dv_accel = D * Vinf/accel
)
inpv
AccelerateEnergy <- function(inp, V, energycalc = FALSE) {
inpv <- RepeatRows(inp, length(V))
inpv$Vinf<- V
inpv <- inpv %>%
mutate(
qinf = 1/2 * rho * Vinf^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = Cd*qinf * S,
accel = D/m,
Dv_accel = D * Vinf/accel
)
if (energycalc == TRUE)
return(inpv$Dv_accel)
}
inp$Mach*Seg3inp$a
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)
Seg3
inph <- RepeatRows(inp, length(h))
inph$h <- h
inph <- StandardAtomsphere(inph) %>%
mutate(
etaprop = etaprop(Vinf),
PA = PA(Pshafteng, Ne, Vinf)) %>%
rowwise() %>%
do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup() %>%
mutate(
P_Vv = (PA/etaprop)/ClimbRate
)
data.frame(inph)
if (energycalc == TRUE)
return(inph$P_Vv)
else if (sinonly == TRUE)
return(inph$SinTheta)
}
AccelerateEnergy <- function(inp, V, energycalc = FALSE) {
inpv <- RepeatRows(inp, length(V))
inpv$Vinf<- V
inpv <- inpv %>%
mutate(
qinf = 1/2 * rho * Vinf^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = Cd*qinf * S,
accel = D/m,
Dv_accel = D * Vinf/accel
)
if (energycalc == TRUE)
return(inpv$Dv_accel)
}
TOenergy <- function(TO, AirDistance, inp) {
#--- Clean up input
TOall <- filter(TO, type == "All Engines")
AirDistanceall <- filter(AirDistance, type == "All Engines")
#--- Take-off Ground Roll
TOgr <- integrate(function(V)
GroundAcceleration(TOall, V, energycalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO
)[[1]] +
PA(inp$Pshafteng, 2, 1.1 * inp$VsTO) * 3
#--- Take-off Transition
TOtr <- integrate(Vectorize(function(h)
PA(inp$Pshafteng, 2, 1.15*inp$VsTO) /
(sin(AirDistanceall$gamma) * 1.15*inp$VsTO)),
lower = 0, upper = AirDistance$hTR
)[[1]]
#--- 1st Semgnet Climb
if (AirDistanceall$SC > 0) {
Seg1 <- integrate(Vectorize(function(h)
PA(inp$Pshafteng, 2, 1.15*inp$VsTO) /
(sin(atan(AirDistanceall$hTR/(AirDistanceall$Sair - AirDistanceall$ST))) * 1.15*inp$VsTO)),
lower = AirDistance$hTR, upper = inp$Hobs
)[[1]]
} else {
Seg1 = 0
}
#--- 2nd Segment Climb
Seg2inp <- inp %>%
mutate(
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2,
Vinf = 1.2*VsTO
)
Seg2 <- integrate(function(h)
ClimbEnergy(Seg2inp, h, energycalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = 400 * 0.3048
)[[1]]
#--- 3rd Segment Acceleration
Seg3inp <- inp %>%
mutate(
h = 400 * 0.3048,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)[[1]]
)
#--- Clean up input
TOall <- filter(TO, type == "All Engines")
AirDistanceall <- filter(AirDistance, type == "All Engines")
#--- Take-off Ground Roll
TOgr <- integrate(function(V)
GroundAcceleration(TOall, V, energycalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO
)[[1]] +
PA(inp$Pshafteng, 2, 1.1 * inp$VsTO) * 3
#--- Take-off Transition
TOtr <- integrate(Vectorize(function(h)
PA(inp$Pshafteng, 2, 1.15*inp$VsTO) /
(sin(AirDistanceall$gamma) * 1.15*inp$VsTO)),
lower = 0, upper = AirDistance$hTR
)[[1]]
#--- 1st Semgnet Climb
if (AirDistanceall$SC > 0) {
Seg1 <- integrate(Vectorize(function(h)
PA(inp$Pshafteng, 2, 1.15*inp$VsTO) /
(sin(atan(AirDistanceall$hTR/(AirDistanceall$Sair - AirDistanceall$ST))) * 1.15*inp$VsTO)),
lower = AirDistance$hTR, upper = inp$Hobs
)[[1]]
} else {
Seg1 = 0
}
#--- 2nd Segment Climb
Seg2inp <- inp %>%
mutate(
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2,
Vinf = 1.2*VsTO
)
Seg2 <- integrate(function(h)
ClimbEnergy(Seg2inp, h, energycalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = 400 * 0.3048
)[[1]]
#--- 3rd Segment Acceleration
Seg3inp <- inp %>%
mutate(
h = 400 * 0.3048,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)[[1]]
energysummary <- data.frame(
TOgr = TOgr,
TOtr = TOtr,
Seg1 = Seg1,
Seg2 = Seg2,
Seg3 = Seg3
)
energysummary
ClimbEnergy <- function(inp, h, energycalc = FALSE, sinonly = FALSE) {
inph <- RepeatRows(inp, length(h))
inph$h <- h
inph <- StandardAtomsphere(inph) %>%
mutate(
Vinf = ifelse(Vconst != 0, Vconst, Mach*a),
etaprop = etaprop(Vinf),
PA = PA(Pshafteng, Ne, Vinf)) %>%
rowwise() %>%
do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup() %>%
mutate(
P_Vv = (PA/etaprop)/ClimbRate
)
data.frame(inph)
if (energycalc == TRUE)
return(inph$P_Vv)
else if (sinonly == TRUE)
return(inph$SinTheta)
}
AccelerateEnergy <- function(inp, V, energycalc = FALSE) {
inpv <- RepeatRows(inp, length(V))
inpv$Vinf<- V
inpv <- inpv %>%
mutate(
qinf = 1/2 * rho * Vinf^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = Cd*qinf * S,
accel = D/m,
Dv_accel = D * Vinf/accel
)
if (energycalc == TRUE)
return(inpv$Dv_accel)
}
#--- 2nd Segment Climb
Seg2inp <- inp %>%
mutate(
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2,
Vconst = 1.2*VsTO
)
Seg2 <- integrate(function(h)
ClimbEnergy(Seg2inp, h, energycalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = 400 * 0.3048
)[[1]]
Seg2
energysummary
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  400 * 0.3048, upper = inp$AltCruise
)[[1]]
# 4th Segment Climb
Seg4inp <- inp %>%
mutate(
Cd0 = Cd0clean,
Ne = 2,
Vconst = 0
)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  400 * 0.3048, upper = inp$AltCruise
)[[1]]
Seg4
Seg4/1e6
Seg4/1e6/2750
energysummary <- data.frame(
TOgr = TOgr,
TOtr = TOtr,
Seg1 = Seg1,
Seg2 = Seg2,
Seg3 = Seg3,
Seg4 = Seg4
)
energysummary
inp$Cd0clean
6900*9.8065
inp$WS
energysummary/1e66
energysummary/1e6
energysummary
energysummary/inp$etamech
energysummary/inp$etamech/1000
energysummary/inp$etamech/1000000
ClimbRatesFunction
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Functions.R', echo=TRUE)
#--- Add in the various interested heights
Climboutput <- RepeatRows(inp, heights)
Climboutput <- cbind(Climboutput, heights)
Climboutput$type <- factor(Climboutput$type, levels = heights$type, ordered = TRUE)
Climboutput <- StandardAtomsphere(Climboutput)
#--- Calculate the aerodynamic parameters and Vinf values
Climboutput <- Climboutput %>%
mutate(
Clmax = Clclean + flaps*Clflaps + hls*Clhls,
Cd0 = Cd0clean + lg*Cd0lg + feathered*Cd0propfea + unfeathered*Cd0propunfea +
(flaps + hls)*(Cd0flaps + Cdiflaps),
Vstall = Vmin(rho, WS, Clmax),
Vsafe = safe*Vstall,
Vcruise = Mach*a,
Vplot = Vcruise*1.25
) %>%
rowwise() %>%
do(data.frame(
.,
Vinf = c(
seq(.$Vstall, .$Vsafe, length = 5),
seq(.$Vsafe, .$Vcruise, length = 20),
seq(.$Vcruise, .$Vplot, length = 20)
),
Vname = c(
"Vstall", rep("Vinf", 4),
"Vsafe", rep("Vinf", 19),
"Vcruise", rep("Vinf", 19))
)) %>%
ungroup() %>%
data.frame(.)
Climboutput <- Climboutput %>%
mutate(
qinf = 1/2 * rho * Vinf^2,
Cl = W / (qinf * S),
Cd = Cd0 + K * Cl^2,
D = qinf * S * Cd,
etaprop = etaprop(Vinf),
PA = PA(Pshafteng, Ne, Vinf),
TA = PA / Vinf) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup() %>%
data.frame(.)
heights <- data.frame(type = c("Takeoff", "2nd Seg", "2nd Seg OEI Feathered", "2nd Seg OEI Unfeathered", "Cruise", "Ceiling", "Landing"),
h = c(0, inp$Hobs, inp$Hobs, inp$Hobs, inp$AltCruise, inp$AltCeil, 0),
Ne = c(2, 2, 1, 1, 2, 2, 2),
flaps = c(1, 1, 1, 1, 0, 0, 0),
hls = c(0, 0, 0, 0, 0, 0, 1),
lg = c(1, 0, 0, 0, 0, 0, 1),
feathered = c(0, 0, 1, 0, 0, 0, 0),
unfeathered = c(0, 0, 0, 1, 0, 0, 0),
safe = c(1.1, 1.2, 1.2, 1.2, 1.2, 1.2, 1.3))
Climboutput <- ClimbFunction(inp, heights)
ClimbFunction(inp, heights)
Climboutput <- ClimbFunction(inp, heights)
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Functions.R', echo=TRUE)
ClimbFunction(inp, heights)
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Functions.R', echo=TRUE)
ClimbFunction(inp, heights)
Climboutput <- ClimbFunction(inp, heights)
inp
heights
ggplot(Climboutput, aes(x=Vinf, y=PerGrad, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
geom_hline(aes(yintercept = 1.5, colour = "2nd Seg OEI")) +
geom_text(aes(x = min(Vinf), y = 1.5, colour = "2nd Seg OEI"),
label = "Minimum 2nd Seg Climb OEI", hjust = 0, vjust = 1.5,
show.legend = FALSE) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "Percentage Graidents", x = "Vinf (m/s)", y = "Percentage Gradient (%)",
colour = "Mission Segment", shape = "Velocity")) +
ylim(-10, NA)
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Functions.R', echo=TRUE)
Climboutput <- ClimbFunction(inp, heights)
ggplot(Climboutput, aes(x=Vinf, y=nload, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
geom_hline(aes(yintercept = 1.5, colour = "2nd Seg OEI")) +
geom_text(aes(x = min(Vinf), y = 1.5, colour = "2nd Seg OEI"),
label = "Minimum 2nd Seg Climb OEI", hjust = 0, vjust = 1.5,
show.legend = FALSE) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "Percentage Graidents", x = "Vinf (m/s)", y = "Percentage Gradient (%)",
colour = "Mission Segment", shape = "Velocity")) +
ylim(-10, NA)
ggplot(Climboutput, aes(x=Vinf, y=nload, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "Percentage Graidents", x = "Vinf (m/s)", y = "Percentage Gradient (%)",
colour = "Mission Segment", shape = "Velocity"))
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Functions.R', echo=TRUE)
ggplot(Climboutput, aes(x=Vinf, y=nload, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "n Loading", x = "Vinf (m/s)", y = "n Loading",
colour = "Mission Segment", shape = "Velocity"))
Climboutput <- ClimbFunction(inp, heights)
# n Loading
ggplot(Climboutput, aes(x=Vinf, y=nload, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "n Loading", x = "Vinf (m/s)", y = "n Loading",
colour = "Mission Segment", shape = "Velocity"))
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Functions.R', echo=TRUE)
Climboutput <- ClimbFunction(inp, heights)
# n Loading
ggplot(Climboutput, aes(x=Vinf, y=nload, group = type, colour = type)) +
geom_path() +
geom_point(aes(shape = Vname, size = ifelse(Vname == "Vinf", 0, 1))) +
scale_size(range = c(0,3)) +
scale_shape_manual(
breaks = c("Vstall", "Vsafe", "Vcruise"),
values = c("Vstall" = 2, "Vsafe" = 0, "Vcruise" = 1, "Vinf" = 1)) +
guides(size = FALSE) +
labs(list(title = "n Loading", x = "Vinf (m/s)", y = "n Loading",
colour = "Mission Segment", shape = "Velocity"))
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Seg2inp <- inp %>%
mutate(
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2,
Vconst = 1.2*VsTO
)
Seg2 <- integrate(function(h)
ClimbEnergy(Seg2inp, h, energycalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = 400 * 0.3048
)[[1]]
Seg2inp
Seg2
energysummary
Seg4inp <- inp %>%
mutate(
Cd0 = Cd0clean,
Ne = 2,
Vconst = 0
)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  400 * 0.3048, upper = inp$AltCruise
)[[1]]
Seg4
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  400 * 0.3048, upper = inp$AltCruise
)[[1]]
Seg4
energysummary
61349455 - 281525818
61349455 - 576723.42
773000.0/60
281525818/1e6
61349455/1e6
source('~/Git/MAE3402 Aircraft Specifications/Helper Power Usage.R', echo=TRUE)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  400 * 0.3048, upper = inp$AltCruise
)[[1]]
Seg4
energysummary
282657110 - 576723.42
Seg4 - 35193759
282657110 - 327486680
sum(energysummary/1000)
sum(energysummary/1000)/3800
#--- Clean up input
TOall <- filter(TO, type == "All Engines")
AirDistanceall <- filter(AirDistance, type == "All Engines")
#--- Take-off Ground Roll
TOgr <- integrate(function(V)
GroundAcceleration(TOall, V, energycalc = TRUE),
lower = 0, upper = 1.1*inp$VsTO
)[[1]] +
PA(inp$Pshafteng, 2, 1.1 * inp$VsTO) * 3
#--- Take-off Transition
TOtr <- integrate(Vectorize(function(h)
PA(inp$Pshafteng, 2, 1.15*inp$VsTO) /
(sin(AirDistanceall$gamma) * 1.15*inp$VsTO)),
lower = 0, upper = AirDistance$hTR
)[[1]]
#--- 1st Semgnet Climb
if (AirDistanceall$SC > 0) {
Seg1 <- integrate(Vectorize(function(h)
PA(inp$Pshafteng, 2, 1.15*inp$VsTO) /
(sin(atan(AirDistanceall$hTR/(AirDistanceall$Sair - AirDistanceall$ST))) * 1.15*inp$VsTO)),
lower = AirDistance$hTR, upper = inp$Hobs
)[[1]]
} else {
Seg1 = 0
}
#--- 2nd Segment Climb
Seg2inp <- inp %>%
mutate(
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2,
Vconst = 1.2*VsTO
)
Seg2 <- integrate(function(h)
ClimbEnergy(Seg2inp, h, energycalc = TRUE),
lower =  max(AirDistance$hTR, inp$Hobs), upper = 400 * 0.3048
)[[1]]
#--- 3rd Segment Acceleration
Seg3inp <- inp %>%
mutate(
h = 400 * 0.3048,
Cd0 = Cd0clean + Cd0flaps + Cdiflaps,
Ne = 2
)  %>%
StandardAtomsphere(.)
Seg3 <- integrate(function(V)
AccelerateEnergy(Seg3inp, V, energycalc = TRUE),
lower = 1.2*inp$VsTO, upper = inp$Mach*Seg3inp$a
)[[1]]
# 4th Segment Climb
Seg4inp <- inp %>%
mutate(
Cd0 = Cd0clean,
Ne = 2,
Vconst = 0
)
Seg4 <- integrate(function(h)
ClimbEnergy(Seg4inp, h, energycalc = TRUE),
lower =  400 * 0.3048, upper = inp$AltCruise
)[[1]]
energysummary <- data.frame(
TOgr = TOgr,
TOtr = TOtr,
Seg1 = Seg1,
Seg2 = Seg2,
Seg3 = Seg3,
Seg4 = Seg4
)
sum(energysummary/1e6)/3800
