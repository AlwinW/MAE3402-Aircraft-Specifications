do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
Int
SteadyClimbInt <- function(inp, h) {
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
}
integrate(function(x) LevelRollInt(POseg2, x)$Eeng, 0, 1000)[[1]]
SteadyClimbInt <- function(inp, h) {
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(
.,
ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W)
)) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
}
integrate(function(x) SteadyClimbInt(POseg2, x)$Eeng, 0, 1000)[[1]]
Vmin()
Vmin
POseg2 <- inp
POseg2 <- mutate(
POseg2,
Ne = 2, Clmax = Clclean + Clflaps
)
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(
Vstall = Vmin(rho, WS, Clmax),
Vinf = Vstall * 1.2,
PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
Int <-POseg2[rep(row.names(POseg2), each = length(h)), 1:length(POseg2)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(
Vstall = Vmin(rho, WS, Clmax),
Vinf = Vstall * 1.2,
PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
Int
data.frame(Int)
integrate(function(x) SteadyClimbInt(POseg2, x)$Eeng, 0, 1000)[[1]]
POseg2 <- inp
POseg2 <- mutate(
POseg2,
Ne = 2, Clmax = Clclean + Clflaps
)
POseg2 <- inp
POseg2 <- mutate(
POseg2,
Ne = 2, Clmax = Clclean + Clflaps
)
SteadyClimbInt <- function(inp, h) {
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(
Vstall = Vmin(rho, WS, Clmax),
Vinf = Vstall * 1.2,
PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
return(Int)
}
integrate(function(x) SteadyClimbInt(POseg2, x)$Eeng, 0, 1000)[[1]]
121.92000 * 3.408
121.92000 * 3.048
specifications
integrate(function(x) SteadyClimbInt(POseg2, x)$Eeng, 10.66800, 121.92000)[[1]]
11350669 - 11350669.4
AeroParamsTable
integrate(function(x) SteadyClimbInt(POseg2, x, 1.452311)$Eeng, 10.66800, 121.92000)[[1]]
# Integral for the power used climbing at a safety factor above Vstall
SteadyClimbInt <- function(inp, h, k) {
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(
Vstall = Vmin(rho, WS, Clmax),
Vinf = Vstall * k,
PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
return(Int)
}
# Power for segment 2 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.2)$Eeng, 10.66800, 121.92000)[[1]]
# Power for segment 4 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.452311)$Eeng, 10.66800, 121.92000)[[1]]
integrate(function(x) SteadyClimbInt(POseg2, x, 1.452311)$Eeng, 121.9200, 3048.0000)[[1]]
312357336 - 374740682
# Integral for the power used climbing at a safety factor above Vstall
SteadyClimbInt <- function(inp, h, k) {
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(
Vstall = Vmin(rho, WS, Clmax),
82.09822,
PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
return(Int)
}
# Power for segment 2 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.2)$Eeng, 10.66800, 121.92000)[[1]]
# Power for segment 4 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.452311)$Eeng, 121.9200, 3048.0000)[[1]]
# Integral for the power used climbing at a safety factor above Vstall
SteadyClimbInt <- function(inp, h, k) {
Int <-inp[rep(row.names(inp), each = length(h)), 1:length(inp)]
Int$h <- h
Int <- StandardAtomsphere(Int) %>%
mutate(
Vstall = Vmin(rho, WS, Clmax),
Vinf = 82.09822,
PA = PA(P0eng, sigma) * Ne) %>%
rowwise() %>%
do(data.frame(., ClimbRatesFunction(.$PA, .$Cd0, .$rho, .$Vinf, .$S, .$K, .$W))) %>%
ungroup()
Int <- mutate(Int, Eeng = PA/ClimbRate)
return(Int)
}
# Power for segment 2 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.2)$Eeng, 10.66800, 121.92000)[[1]]
# Power for segment 4 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.452311)$Eeng, 121.9200, 3048.0000)[[1]]
374740292 - 374740682
LevelAccelInt <- function(inp, V) {
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int = mutate(Int,
qinf = 1/2 * rho * V^2,
Cl = W/(rho * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
TA = PA/V,
accel = (TA - D) / m,
Eeng =  1/ accel)
return(Int)
}
POseg2 <- inp
POseg2 <- mutate(
POseg2,
Ne = 2, Clmax = Clclean
)
# Power for segment 4 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.452311)$Eeng, 121.9200, 3048.0000)[[1]]
312357336 - 374740682
374740292 - 374740682
POseg2 <- inp
POseg2 <- mutate(
POseg2,
Ne = 2, Clmax = Clclean + Clflaps
)
# Power for segment 2 climb
integrate(function(x) SteadyClimbInt(POseg2, x, 1.2)$Eeng, 10.66800, 121.92000)[[1]]
POseg3 <- inp
POseg3 <- mutate(
POseg3,
Ne = 2, Clmax = Clclean
)
# Power for segment 4 climb
integrate(function(x) SteadyClimbInt(POseg3, x, 1.452311)$Eeng, 121.9200, 3048.0000)[[1]]
PA
POseg3 <- inp %>%
mutate(Ne = 2,
PA = PA(P0eng, sigma))
POseg3 <- inp %>%
mutate(Ne = 2)
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
V = 50
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int
Int <- POseg3
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(rho * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  1/ accel)
Int
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(q * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  1/ accel)
POseg3 <- inp %>%
mutate(Ne = 2)
Int <- POseg3
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  1/ accel)
Int
3660.003 * 50
integrate(function(x) LevelAccelInt(POseg3, x, 1.452311)$Eeng, 47.72724, 82.09822)[[1]]
integrate(function(x) LevelAccelInt(POseg3, x)$Eeng, 47.72724, 82.09822)[[1]]
# Integral for the power used accelerating from one velocity to another
LevelAccelInt <- function(inp, V) {
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  1/ accel)
return(Int)
}
POseg3 <- inp %>%
mutate(Ne = 2)
# Power for segment 4 climb
integrate(function(x) LevelAccelInt(POseg3, x)$Eeng, 47.72724, 82.09822)[[1]]
# Integral for the power used accelerating from one velocity to another
LevelAccelInt <- function(inp, V) {
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  PA/ accel)
return(Int)
}
POseg3 <- inp %>%
mutate(Ne = 2)
# Power for segment 4 climb
integrate(function(x) LevelAccelInt(POseg3, x)$Eeng, 47.72724, 82.09822)[[1]]
185023234 - 25338053.5
# Integral for the power used accelerating from one velocity to another
LevelAccelInt <- function(inp, V) {
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  PA/ accel)
return(Int)
}
POseg3 <- inp %>%
mutate(Ne = 2,
h = 121.92)
# Power for segment 4 climb
integrate(function(x) LevelAccelInt(POseg3, x)$Eeng, 47.72724, 82.09822)[[1]]
rm POseg3
rm(POseg3)
rm(Int)
# Integral for the power used accelerating from one velocity to another
LevelAccelInt <- function(inp, V) {
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  PA/ accel)
return(Int)
}
POseg3 <- inp %>%
mutate(Ne = 2,
h = 121.92)
# Power for segment 4 climb
integrate(function(x) LevelAccelInt(POseg3, x)$Eeng, 47.72724, 82.09822)[[1]]
POseg3 <- inp %>%
mutate(Ne = 2,
h = 121.92)
POseg3
Int  <- POseg3
V = 50
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma),
TA = PA/V,
accel = (TA - D) / m,
Eeng =  PA/ accel)
Int
# Integral for the power used accelerating from one velocity to another
LevelAccelInt <- function(inp, V) {
Int <- inp[rep(row.names(inp), each = length(V)), 1:length(inp)]
Int$V <- V
Int <- StandardAtomsphere(Int) %>%
mutate(qinf = 1/2 * rho * V^2,
Cl = W/(qinf * S),
Cd = Cd0 + K*Cl^2,
D = qinf*S*Cd,
PA = PA(P0eng, sigma)*Ne,
TA = PA/V,
accel = (TA - D) / m,
Eeng =  PA/ accel)
return(Int)
}
POseg3 <- inp %>%
mutate(Ne = 2,
h = 121.92)
# Power for segment 4 climb
integrate(function(x) LevelAccelInt(POseg3, x)$Eeng, 47.72724, 82.09822)[[1]]
25123783 - 25338053.5
(25123783 - 25338053.5)/25338053.5
inp
inp
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Initial Values.R', echo=TRUE)
inp  <- t(specifications["Value"])
colnames(inp) <- t(specifications["Variable"])
inp <- cbind(inputvals, inp)
inp
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Install Packages.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint
specifications$PerGrad2Seg/100
specifications$PerGrad2Seg
specifications
1.5/100
input_initial$Cd0G
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Install Packages.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint
View(constraint)
1/(pi * 20 * 0.827)
names(constraint)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
1.1 * 0.98065 / 0.73
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
theme_set(theme_bw)
theme_set(theme_bw())
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
names(constraint)
1/(pi*11*0.80)
varWS = seq(1000,3000, by = 250)
varClhls = seq(0.9,1.2, by = 0.3)
constraint <- inp %>%
select(-S, -b, -m, -W, -P0eng, -P0) %>%
mutate(h = AltCruise) %>%
StandardAtomsphere(.)
constraint <-  RepeatRows(constraint, length(varClhls))
constraint$Clhls <- varClhls
constraint$Clflaps <- varClhls
constraint <-  RepeatRows(constraint, length(varWS))
constraint$WS <- varWS
# Test using Hugh's Data
constraint <- mutate(
AR = 11,
e = 0.80,
K = 0.03617158,
Cd0 = 0.02,
Clclean = 1.6,
Clflaps = 0.4,
Clhls = 0.7,
Etatotal = 0.3720,
Etaprop = 0.3720
)
varWS = seq(1000,3000, by = 250)
varClhls = seq(0.9,1.2, by = 0.3)
constraint <- inp %>%
select(-S, -b, -m, -W, -P0eng, -P0) %>%
mutate(h = AltCruise) %>%
StandardAtomsphere(.)
constraint <-  RepeatRows(constraint, length(varClhls))
constraint$Clhls <- varClhls
constraint$Clflaps <- varClhls
constraint <-  RepeatRows(constraint, length(varWS))
constraint$WS <- varWS
# Test using Hugh's Data
constraint <- mutate(
constraint,
AR = 11,
e = 0.80,
K = 0.03617158,
Cd0 = 0.02,
Clclean = 1.6,
Clflaps = 0.4,
Clhls = 0.7,
Etatotal = 0.3720,
Etaprop = 0.3720
)
constraint
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
ggplot(data = constraint, aes(x = WS)) +
geom_vline(aes(xintercept = WS_App, colour = "Landing")) +
geom_vline(aes(xintercept = WS_Clstar, colour = "Clstar")) +
geom_vline(aes(xintercept = WS_WbW0_Max, colour = "Wb/W0")) +
geom_line(aes(y = PW_TOFL, colour = "Takeoff")) +
geom_line(aes(y = PW_Cruise, colour = "Cruise")) +
geom_line(aes(y = PW_Ceiling_Climb, colour = "Ceiling Climb")) +
geom_line(aes(y = PW_Seg2_Climb, colour = "2nd Segment OEI")) +
geom_line(aes(y = PW_Cruise_Climb, colour = "Cruise Climb")) +
facet_grid(~Clhls)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$PW_TOFL
constraint$ClTO
constraint$rho_sl
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$PW_TOFL
constraint['WS', 'PW_TOFL']
constraint['WS']
constraint['WS']['PW_TOFL']
constraint['WS', 'PW_TOFL']
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$PW_TOFL
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$PW_TOFL
constraint$WS_App
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
names(inp)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$rho_ceil
constraint$rho_ceil/1.225
StandardAtomsphere(mutate(constraint,h=AltCeil))
StandardAtomsphere(select(mutate(constraint,h=AltCeil),h))
constraint$PW_Seg2_Climb
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$PW_TOFL
constraint$PW_Cruise
constraint$Clcruise
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
rm(constraint)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$Clcruise
constraint$PW_Cruise
constraint$rho
constraint$sigma
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
constraint$PW_Cruise
constraint$rho
constraint$Clcruise
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Rough Constraint Analysis.R', echo=TRUE)
