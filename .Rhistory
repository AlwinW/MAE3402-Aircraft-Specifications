colour = "Landing"), size = rel(3), show.legend = FALSE) +
# WbW0 Labels
geom_label(data = constraint, aes(x = WS_WbW0_Max, y = 10, label = sprintf("%0.2f", WbW0_Max),
colour = "Wb/W0"), size = rel(3), show.legend = FALSE) +
# Clstar Labels
geom_label(data = constraint, aes(x = WS_Clstar, y = 14, label = sprintf("Cl*"),
colour = "Clstar"), size = rel(3), show.legend = FALSE) +
# Cruise Labels
geom_point(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, colour = "Cruise")) +
geom_label(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, label = sprintf("%0.2f", Clcruise),
colour = "Cruise"), size = rel(3), vjust = 1.5, show.legend = FALSE) +
# Takeoff Labels
geom_label(data = filter(constraint, WS == varWS[3]),
aes(x = WS, y = PW_TOFL, label = sprintf("%0.2f", Clhls),
colour = "Takeoff"), size = rel(3), show.legend = FALSE) +
# OEI Labels
geom_label(data = filter(constraint, WS == varWS[2]),
aes(x = WS, y = PW_Seg2_Climb, label = sprintf("%0.2f", Clhls),
colour = "2nd Segment OEI"), size = rel(3), show.legend = FALSE) +
# Us
geom_point(data = constraint, data = inp, aes(x = WS, y = P0/W, label = "Design")) +
xlab("Wing Loading (N/m^2)") +
ylab("Power Loading (W/N)") +
ggtitle("Constraint Analysis") +
geom_label(x = -Inf, y = Inf, vjust = 1.5, hjust = -0.1,
label = "Constant Cd0, AR, e and eta")
## Constraint Plot ======================================================================
ConstraintPlot + #ggplot(data = constraint, aes(x = WS, group = Clhls)) +
geom_vline(data = constraint, aes(xintercept = WS_App, colour = "Landing")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_TOFL, colour = "Takeoff")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Ceiling_Climb, colour = "Ceiling Climb")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Seg2_Climb, colour = "2nd Segment OEI")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise_Climb, colour = "Cruise Climb")) +
geom_vline(data = constraint, aes(xintercept = WS_Clstar, colour = "Clstar")) +
geom_vline(data = constraint, aes(xintercept = WS_WbW0_Max, colour = "Wb/W0")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, colour = "Cruise")) +
# Landing Labels
geom_label(data = constraint, aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
geom_label(data = constraint, aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
# WbW0 Labels
geom_label(data = constraint, aes(x = WS_WbW0_Max, y = 10, label = sprintf("%0.2f", WbW0_Max),
colour = "Wb/W0"), size = rel(3), show.legend = FALSE) +
# Clstar Labels
geom_label(data = constraint, aes(x = WS_Clstar, y = 14, label = sprintf("Cl*"),
colour = "Clstar"), size = rel(3), show.legend = FALSE) +
# Cruise Labels
geom_point(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, colour = "Cruise")) +
geom_label(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, label = sprintf("%0.2f", Clcruise),
colour = "Cruise"), size = rel(3), vjust = 1.5, show.legend = FALSE) +
# Takeoff Labels
geom_label(data = filter(constraint, WS == varWS[3]),
aes(x = WS, y = PW_TOFL, label = sprintf("%0.2f", Clhls),
colour = "Takeoff"), size = rel(3), show.legend = FALSE) +
# OEI Labels
geom_label(data = filter(constraint, WS == varWS[2]),
aes(x = WS, y = PW_Seg2_Climb, label = sprintf("%0.2f", Clhls),
colour = "2nd Segment OEI"), size = rel(3), show.legend = FALSE) +
# Us
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
xlab("Wing Loading (N/m^2)") +
ylab("Power Loading (W/N)") +
ggtitle("Constraint Analysis") +
geom_label(x = -Inf, y = Inf, vjust = 1.5, hjust = -0.1,
label = "Constant Cd0, AR, e and eta")
ConstraintPlot + stat_contour(data = weightoptim, aes(x = WS, y = PW, z = MTOM, colour = ..level..))
ConstraintPlot + stat_contour(data = weightoptim, aes(x = WS, y = PW, z = MTOM, colour = ..level..))
ConstraintPlot
MTOMcontourplot
LabelledMTOMcontourplot
MTOMcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..)#breaks=c(c(seq(4000, 8000, 100), seq(7000, 20000, 500)))
) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("MTOM")
LabelledMTOMcontourplot <- direct.label(MTOMcontourplot, method = "top.pieces")
inp
LabelledMTOMcontourplot
## Constraint Plot ======================================================================
LabelledMTOMcontourplot + #ggplot(data = constraint, aes(x = WS, group = Clhls)) +
geom_vline(data = constraint, aes(xintercept = WS_App, colour = "Landing")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_TOFL, colour = "Takeoff")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Ceiling_Climb, colour = "Ceiling Climb")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Seg2_Climb, colour = "2nd Segment OEI")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise_Climb, colour = "Cruise Climb")) +
geom_vline(data = constraint, aes(xintercept = WS_Clstar, colour = "Clstar")) +
geom_vline(data = constraint, aes(xintercept = WS_WbW0_Max, colour = "Wb/W0")) +
geom_line(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, colour = "Cruise")) +
# Landing Labels
geom_label(data = constraint, aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
geom_label(data = constraint, aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
# WbW0 Labels
geom_label(data = constraint, aes(x = WS_WbW0_Max, y = 10, label = sprintf("%0.2f", WbW0_Max),
colour = "Wb/W0"), size = rel(3), show.legend = FALSE) +
# Clstar Labels
geom_label(data = constraint, aes(x = WS_Clstar, y = 14, label = sprintf("Cl*"),
colour = "Clstar"), size = rel(3), show.legend = FALSE) +
# Cruise Labels
geom_point(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, colour = "Cruise")) +
geom_label(data = constraint, aes(x = WS, group = Clhls, y = PW_Cruise, label = sprintf("%0.2f", Clcruise),
colour = "Cruise"), size = rel(3), vjust = 1.5, show.legend = FALSE) +
# Takeoff Labels
geom_label(data = filter(constraint, WS == varWS[3]),
aes(x = WS, y = PW_TOFL, label = sprintf("%0.2f", Clhls),
colour = "Takeoff"), size = rel(3), show.legend = FALSE) +
# OEI Labels
geom_label(data = filter(constraint, WS == varWS[2]),
aes(x = WS, y = PW_Seg2_Climb, label = sprintf("%0.2f", Clhls),
colour = "2nd Segment OEI"), size = rel(3), show.legend = FALSE) +
# Us
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
xlab("Wing Loading (N/m^2)") +
ylab("Power Loading (W/N)") +
ggtitle("Constraint Analysis") +
geom_label(x = -Inf, y = Inf, vjust = 1.5, hjust = -0.1,
label = "Constant Cd0, AR, e and eta")
LabelledMTOMcontourplot
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Constraint Analysis.R', echo=TRUE)
ConstraintPlot
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Constraint Analysis.R', echo=TRUE)
ConstraintPlot
ggplot(data = weightoptim) +
geom_line(aes(x = S_wing, y = MTOM, group = PW, colour = PW))
ggplot(data = weightoptim) +
geom_line(aes(x = S_wing, y = MTOM, group = WS, colour = WS))
ggplot(data = weightoptim) +
geom_line(aes(x = S_wing, y = MTOM, group = PW, colour = PW))
ggplot(data = weightoptim) +
geom_line(aes(x = S_wing, y = MTOM, group = WS, colour = WS))
ggplot(data = weightoptim) +
geom_line(aes(x = WS, y = MTOM, colour = PW, group = PW))
ggplot(data = weightoptim) +
geom_line(aes(x = WS, y = MTOM, colour = PW, group = PW)) +
geom_line(aes(x = PW, y = MTOM, colour = WS, group = WS))
ggplot(data = weightoptim) +
geom_line(aes(x = WS, y = MTOM, colour = MTOM, group = PW)) +
geom_line(aes(x = WS, y = MTOM, colour = MTOM, group = WS))
names(weightoptim)
11000/100
carpetplot <- weightoptim %>%
mutate(x = WS + MTOM/100)
# Carpet Plot (sort of)
ggplot(data = carpetplot, aes(x = x, y = MTOM, colour = MTOM)) +
geom_line(aes(group = PW)) +
geom_line(aes(group = WS))
head(carpetplot$WS)
head(carpetplot$x)
carpetplot <- weightoptim %>%
mutate(x = WS + MTOM/10)
# Carpet Plot (sort of)
ggplot(data = carpetplot, aes(x = x, y = MTOM, colour = MTOM)) +
geom_line(aes(group = PW)) +
geom_line(aes(group = WS))
carpetplot <- weightoptim %>%
mutate(x = WS + MTOM/10)
# Carpet Plot (sort of)
ggplot(data = carpetplot, aes(x = x, y = MTOM, colour = MTOM)) +
geom_path(aes(group = PW)) +
geom_path(aes(group = WS))
# Grid of data values
varWS <- seq(1500,5500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
)) %>%
do(data.frame(
.,
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
weightoptim <- data.frame(weightoptim)
# Carpet Plot (sort of)
ggplot(data = carpetplot, aes(x = x, y = MTOM, colour = MTOM)) +
geom_path(aes(group = PW)) +
geom_path(aes(group = WS)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
carpetplot <- weightoptim %>%
mutate(x = WS + MTOM/5)
# Carpet Plot (sort of)
ggplot(data = carpetplot, aes(x = x, y = MTOM, colour = MTOM)) +
geom_path(aes(group = PW)) +
geom_path(aes(group = WS)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
BatteryFractioncontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = batteries_Fraction, colour = ..level..)
) +
ggtitle("Battery Fraction")
LabelledBatteryFractioncontourplot <- direct.label(BatteryFractioncontourplot, method = "top.pieces")
LabelledBatteryFractioncontourplot
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..)
) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
# Wing area (iterated solution)
# Decreases with increasing WS (duh) but more curvature at higher WS
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,24, 1), seq(25,100,5))
) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
Cd0contourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = Cd0, colour = ..level..)
)
direct.label(Cd0contourplot, method = "top.pieces")
direct.label(Swingcontourplot, method = "top.pieces")
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,20, 1), seq(21, 30, 3), seq(25,100,5))
) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,20, 1), seq(24, 30, 3), seq(25,100,5))) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,23, 1), seq(24, 30, 3), seq(25,100,5))) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
# Wing area (iterated solution)
# Decreases with increasing WS (duh) but more curvature at higher WS
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,23, 1), seq(24, 30, 2), seq(25,100,5))) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
# Wing area (iterated solution)
# Decreases with increasing WS (duh) but more curvature at higher WS
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,23, 1), seq(24, 30, 2.5), seq(25,100,5))) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..),
breaks = c(seq(5,23, 1), seq(25, 30, 2.5), seq(25,100,5))) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("Wing Area")
direct.label(Swingcontourplot, method = "top.pieces")
Savingplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = Saving_Total, colour = ..level..)
)
direct.label(Savingplot, method = "top.pieces")
Savingplot <- ggplot(data = weightoptim, aes(x = WS, y = PW))+
stat_contour(aes(z = Saving_Total, colour = ..level..),
breaks = c(seq(100, 150, 10), seq(150, 200, 25), seq(200, 1000, 50))
)
direct.label(Savingplot, method = "top.pieces")
Savingplot <- ggplot(data = weightoptim, aes(x = WS, y = PW))+
stat_contour(aes(z = Saving_Total, colour = ..level..),
breaks = c(seq(100, 150, 5), seq(150, 200, 25), seq(200, 1000, 50))
)
direct.label(Savingplot, method = "top.pieces")
Savingplot <- ggplot(data = weightoptim, aes(x = WS, y = PW))+
stat_contour(aes(z = Saving_Total, colour = ..level..),
breaks = c(seq(100, 150, 10), seq(150, 200, 25), seq(200, 1000, 50))
)
direct.label(Savingplot, method = "top.pieces")
Savingplot <- ggplot(data = weightoptim, aes(x = WS, y = PW))+
stat_contour(aes(z = Saving_Total, colour = ..level..),
breaks = c(seq(100, 150, 10), seq(150, 200, 25), seq(200, 1000, 50))
) +
geom_point(data = inp, aes(x = WS, y = P0/W, label = "Design")) +
ggtitle("Composite Weight Saving (Raymer Correlation)")
direct.label(Savingplot, method = "top.pieces")
install.packages("directlabels")
df  <- data.frame(x = 1, y = 1)
df
select(df, -x)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
select(df, -x)
select(df, -y)
select(df, -z)
6900 * 9.8065
6900/24.5
67664.85/24.5
67664.85/(1/2 * 0.9094 * 81.5^2)
67664.85/(1/2 * 0.9094 * 81.5^2 * 24.5)
sqrt(2/1.225 * 2761.831 * 1/2.8) / 1.3
sqrt(2/1.225 * 2761.831 * 1/2.8) * 1.3
sqrt(2/1.225 * 2761.831 * 1/2.8) * 1.2
sqrt(2/1.225 * 2761.831 * 1/2.8) * 1.3
51.444 /1.3 * 1.2
sqrt(2/1.225 * 2761.831 * 1/2.9) * 1.3
67664.85/(1/2*1.225*51.4444^2 *24.5)
67664.85/(1/2*1.225*51.4444^2 *24.5) * 1.3^2
0.98*0.95*0.98
0.98*0.95*0.98*0.8
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
initial_values$Cd0clean
input_initial$Cd0clean
input_initial$Cd0clean + input_initial$Clflaps
input_initial$Cd0clean + input_initial$Cd0flaps + input_initial$Cd0lg
input_initial$Cd0clean + input_initial$Cd0flaps + input_initial$Cd0lg + input_initial$Cdiflaps
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
input_initial$Cd0clean + input_initial$Cd0flaps + input_initial$Cd0lg + input_initial$Cdiflaps + input_initial$Cd0OEI
668100*2
setNames(t(specifications_description["Value"], specifications_description["Variable"]
]))
setNames(t(specifications_description["Value"], specifications_description["Variable"]
))
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
specifications
specifications <- setNames(t(specifications_description["Value"]),  t(specifications_description["Variable"]))
specifications
?setNames
t(specifications_description["Value"])
## Specifications ======================================================================
specifications_description <- data.frame(
Variable = c("Mp", "Wp", "E", "Dens", "Srun", "Hobs", "Vappmax", "PerGrad2Seg", "ClimbCruise", "ClimbCeil", "AltCruise", "AltCeil",
"Mach", "Range", "LoadMax", "LoadMin"),
Description = c("Payload Mass (kg)","Payload Weight (N)","Battery Specific Energy (J/kg)","Battery Density (kg/m^3)",
"Runway Length (m)","Screen Height (m)","Maximum Landing Speed (m/s)","Climb Gradient 2nd Segment (%)",
"Climb at Cruise (m/s)","Climb at Ceiling (m/s)","Altitude of Cruise (m)","Altitude of Ceiling (m)",
"Cruise Mach Number (M)","Range (m)","Load Factor Max (n)","Load Factor Min (n)"),
Value = c(120 * 6, 120 * 6 * 9.8065, 1e6, 2750, 1000, 35 * 0.3048, 100 * 0.5144, 1.5, 300 * 0.3048 / 60,
100 * 0.3048 / 60, 10000 * 0.3048, 12000 * 0.3048, 0.25, 1000e3, 3.5, -1.5)
)
specifications <- setNames(t(specifications_description["Value"]),  t(specifications_description["Variable"]))
specifications  <- t(specifications_description["Value"])
colnames(specifications) <- t(specifications_description["Variable"])
specifications
specifications <- setNames(t(specifications_description["Value"]),  t(specifications_description["Variable"]))
specifications
class(t(specifications_description["Value"]))
data.frame(t(specifications_description["Value"]))
specifications <- setNames(data.frame(t(specifications_description["Value"])),  t(specifications_description["Variable"]))
specifications
StandardAtomsphere(data.frame(h = 1))
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
StandardAtomsphere(data.frame(h = 1))
specifications
input_initial
specifications$rhoCruise <- StandardAtomsphere(h = specifications$AltCruise)$rho
StandardAtomsphere(h = specifications$AltCruise)
specifications$rhoCruise <- StandardAtomsphere(specifications$AltCruise)$rho
specifications$rhoCruise <- StandardAtomsphere(data.frame(h = specifications$AltCruise))$rho
specifications
specifications$rhoCruise <- StandardAtomsphere(data.frame(h = specifications$AltCeil))$rho
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
specifications
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
specs
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
var = seq(0,10,1)
length(var)
ncol(var)
nrol(var)
nrow(var)
length(var)
data.frame(x = 1, y = 2, z = 3)
length(data.frame)
is.numeric(1)
length(1)
class(var)
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Calculations.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
?quietly
?message
suppressWarnings(
library(shiny)
library(shinyAce)
library(rsconnect)
library(MASS)
library(lazyeval)
library(tidyr)
library(dplyr)
library(purrr)
library(broom)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(directlabels)
)
library(shiny, shinyAce)
suppressWarnings(library(
shiny,
shinyAce,
rsconnect,
MASS,
lazyeval,
tidyr,
dplyr,
purrr,
broom,
ggplot2,
RColorBrewer,
reshape2,
directlabels
))
?library
?suppressMessages
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
suppressWarnings(LoadPackages())
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
inp  <- cbind(input_initial, specs)
?switch
?recode
?factor
inp = data.frame(
segment = as.factor("NA")
)
inp
inp$segment
inp = data.frame(
segment = as.factor("NA", labels = c("NA", "AN"))
)
inp = data.frame(
segment = as.factor("NA", levels = 1:2, labels = c("NA", "AN"))
)
?as.factor
ff <- factor(substring("statistics", 1:10, 1:10), levels = letters)
ff
factor(letters[1:20], labels = "letter")
inp = data.frame(
segment = as.factor("NA", levels = 1:2,)
)
inp = data.frame(
segment = as.factor("NA", levels = 1:2)
)
## inp Dataframe ======================================================================
inp = data.frame(
segment = as.factor("NA")
)
z <- factor(LETTERS[3:1], ordered = TRUE)
## inp Dataframe ======================================================================
inp = data.frame(
segment = factor("NA", levels = c("NA", "AN"))
)
inp
inp$segment
# inp Dataframe ======================================================================
inp = data.frame(segment = factor(
"NA",
levels = c(
"Takeoff",
"Transition",
"Segment 1",
"Segment 2",
"Segment 3",
"Segment 4",
"Cruise",
"Descend",
"Flare",
"Landing"
)),
input_initial,
specs
)
inp
## inp Dataframe ======================================================================
inp = data.frame(segment = factor(
"NA",
levels = c(
"Takeoff",
"Transition",
"Segment 1",
"Segment 2",
"Segment 3",
"Segment 4",
"Cruise",
"Descend",
"Flare",
"Landing",
"NA"
)),
input_initial,
specs
)
inp
inp$segment
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
inp
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Calculations.R', echo=TRUE)
0.000000652
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Calculations.R', echo=TRUE)
etaprop(50)
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Calculations.R', echo=TRUE)
etaprop(50)
plot(1:150, etaprop(1:150))
source('~/Git/MAE3402 Aircraft Specifications/Helper Aerodynamic Calculations.R', echo=TRUE)
plot(1:150, etaprop(1:150))
max(etaprop(1:100))
max(etaprop(1:150))
library(forecast)
