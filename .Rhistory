filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = contour(varWS, varPW, asdf, nlevels = 20,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE))
?points
?lines
plot(cars, main = "Stopping Distance versus Speed")
lines(stats::lowess(cars))
stats::lowess(cars)
filled.contour(varWS, varPW, asdf, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf, nlevels = 9,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = TRUE,
frame.plot = TRUE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = TRUE,
frame.plot = TRUE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
})
MTOMlattice <- weightoptim %>%
mutate(ifelse(MTOM > 12000, 12000, MTOM)) %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
})
asdf
MTOMlattice <- weightoptim %>%
mutate(MTOM = ifelse(MTOM > 12000, 12000, MTOM)) %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Maximum Take Off MASS (MTOM)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 11, col=brewer.pal(11,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
brewer.pal.info
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Set3"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"PiYG"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"BrBG"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Spectral"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Paired"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"PuOr"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"RdYlBu"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Purples"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Accent"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"RdBu"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
brewer.pal.info
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Pastel1"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Pastel2"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
?brewer.pal
filled.contour(varWS, varPW, asdf, nlevels = 9, col=rev(brewer.pal(9,"Spectral")),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
title = "MTOM",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
?title
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
main = "MTOM",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
main = "Maximum Take Off Mass (MTOM)",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
points(2000, 10);
lines(x = c(2000, 3000), y = c(10, 20))
})
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
weightoptim3D
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
varAR <- seq(5, 35, length.out = 5)
varAR
varAR <- seq(5, 35, length.out = 7)
varAR
weightoptim3D$AR <- varAR
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
varAR <- seq(5, 35, length.out = 7)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
weightoptim3D <- RepeatRows(weightoptim3D, varAR)
weightoptim3D$AR <- varAR
weightoptim3D
## 3D Plots ======================================================================
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
varAR <- seq(5, 35, length.out = 7)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
weightoptim3D <- RepeatRows(weightoptim3D, varAR)
weightoptim3D$AR <- varAR
weightoptim3D <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, AR =.$AR, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
))
weightoptim3D <- data.frame(weightoptim3D)
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
varAR <- seq(5, 35, length.out = 7)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
weightoptim3D <- RepeatRows(weightoptim3D, varAR)
weightoptim3D$AR <- varAR
weightoptim3D <- weightoptim3D %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, AR =.$AR, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
))
weightoptim3D <- data.frame(weightoptim3D)
?plotly
?plot_ly
plot_ly(data = weightoptim3D, x = WS, y = PW, z = MTOM)
weightoptim3D
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~MTOM)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, size ~MTOM)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, size = ~MTOM)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, size = ~MTOM)
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
varAR <- seq(15, 45, length.out = 7)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
weightoptim3D <- RepeatRows(weightoptim3D, varAR)
weightoptim3D$AR <- varAR
## 3D Plots ======================================================================
varWS <- seq(1500,3500, length.out = 11)
varPW <- seq(0, 30, length.out = 11)
varAR <- seq(15, 45, length.out = 7)
weightoptim3D <- expand.grid(WS = varWS, PW = varPW)
weightoptim3D <- RepeatRows(weightoptim3D, varAR)
weightoptim3D$AR <- varAR
weightoptim3D <- weightoptim3D %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, AR =.$AR, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
))
weightoptim3D <- data.frame(weightoptim3D)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, size = ~MTOM)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, size = ~MTOM, alpha = 0.5)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, alpha = 0.5)
plot_ly(data = weightoptim3D, x = ~WS, y = ~PW, z = ~AR, color = ~MTOM, alpha = 0.3)
source('~/Git/MAE3402 Aircraft Specifications/Helper Constraint Analysis.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Constraint Analysis.R', echo=TRUE)
etaprop(inp$Vcruise)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
etaprop(1.2 * inp$VsTO)
constraint <- inp %>%
select(-S, -b, -m, -W) %>%
mutate(h = AltCruise,
Etaprop = etaprop(inp$Vcruise),
Etatotal = inp$etamech*Etaprop,
BatteryFactor = 1.03,
Cd0G = 0.18, # feathered, 0.205 unfeathered
EtapropG = etaprop(1.2 * inp$VsTO)) %>%
StandardAtomsphere(.)
varWS = seq(1500,3500, by = 250)
varClhls = seq(0.9,1.3, by = 0.1)
varWbW0_Max = seq(0.525,0.65, by = 0.025)
constraint <- inp %>%
select(-S, -b, -m, -W) %>%
mutate(h = AltCruise,
Etaprop = etaprop(inp$Vcruise),
Etatotal = inp$etamech*Etaprop,
BatteryFactor = 1.03,
Cd0G = 0.18, # feathered, 0.205 unfeathered
EtapropG = etaprop(1.2 * inp$VsTO)) %>%
StandardAtomsphere(.)
constraint <-  RepeatRows(constraint, length(varClhls))
constraint$Clhls <- varClhls
constraint$Clflaps <- varClhls
constraint <-  RepeatRows(constraint, length(varWS))
constraint$WS <- varWS
constraint <-  RepeatRows(constraint, length(varWbW0_Max))
constraint$WbW0_Max <- varWbW0_Max
constraint <- constraint %>%
mutate(
ClTO = Clclean + Clflaps,
ClLD = Clclean + Clhls,
Vcruise = Mach * a,
qinf = 1/2 * rho * Vcruise^2,
## Landing Approach Speed ======================================================================
WS_App = (ClTO) * (1/2 * rho_sl) * (Vappmax / 1.3) ^ 2,
## Takeoff Field Length ======================================================================
TOa = WS^2 * (0.255/ClTO^2),
TOb = (11.8/ClTO) * WS,
TOc = - Srun,
PW_TOFL = 2*TOa/(-TOb + sqrt(TOb^2 - 4*TOa*TOc)),
## Cruise Speed ======================================================================
Clcruise = WS / qinf,
PW_Cruise = (Vcruise/Etaprop) * (Cd0/Clcruise + K*Clcruise),
## Climb at Ceilinng ======================================================================
rho_ceil = 0.8491284, # DON'T HARD CODE IT LATER
PW_Ceiling_Climb = ClimbCeil/Etaprop + (2/(Etaprop * rho_ceil)) * sqrt((K * WS)/(3*Cd0)) * (1.155 * sqrt(4*Cd0*K)),
## Climb OEI 2nd Segment ======================================================================
c = sqrt(1.2^2 * 2 / (rho_sl * ClTO)),
Clseg2 = ClTO / 1.2^2,
Cdseg2 = Cd0G + K * Clseg2^2,
PW_Seg2_Climb = 2 *((PerGrad2Seg/100 + Cdseg2/Clseg2)  * sqrt(WS) / (EtapropG/c)),
## Climb at Cruise ======================================================================
PW_Cruise_Climb = ClimbCruise/Etaprop + (2/(Etaprop * rho)) * sqrt((K * WS)/(3*Cd0)) * (1.155 * sqrt(4*Cd0*K)),
## Fly Near Clstar ======================================================================
Clstar = sqrt(Cd0/K),
WS_Clstar = qinf * Clstar,
## Empty Weight Fraction ======================================================================
WbW0 = (qinf  * Cd0 / WS + K / qinf * WS ) * BatteryFactor * g_sl / Etatotal,
WbW0Cd0 = (qinf  * Cd0 / WS) * BatteryFactor * g_sl / Etatotal,
WbW0K = (K / qinf * WS ) * BatteryFactor * g_sl / Etatotal,
WS_WbW0_Max = (WbW0_Max * qinf - sqrt(qinf^2 * (WbW0_Max^2 - 4*Cd0*(BatteryFactor*g_sl/Etatotal)^2*K))) /
(2*(BatteryFactor*g_sl/Etatotal)*K)
)
View(constraint)
ConstraintPlot <- ggplot(data = constraint, aes(x = WS, group = Clhls)) +
geom_vline(aes(xintercept = WS_App, colour = "Landing")) +
geom_line(aes(y = PW_TOFL, colour = "Takeoff")) +
geom_line(aes(y = PW_Ceiling_Climb, colour = "Ceiling Climb")) +
geom_line(aes(y = PW_Seg2_Climb, colour = "2nd Segment OEI")) +
geom_line(aes(y = PW_Cruise_Climb, colour = "Cruise Climb")) +
geom_vline(aes(xintercept = WS_Clstar, colour = "Clstar")) +
geom_vline(aes(xintercept = WS_WbW0_Max, colour = "Wb/W0")) +
geom_line(aes(y = PW_Cruise, colour = "Cruise")) +
# Landing Labels
geom_label(aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
geom_label(aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
# WbW0 Labels
geom_label(aes(x = WS_WbW0_Max, y = 10, label = sprintf("%0.2f", WbW0_Max),
colour = "Wb/W0"), size = rel(3), show.legend = FALSE) +
# Clstar Labels
geom_label(aes(x = WS_Clstar, y = 14, label = sprintf("Cl*"),
colour = "Clstar"), size = rel(3), show.legend = FALSE) +
# Cruise Labels
geom_point(aes(y = PW_Cruise, colour = "Cruise")) +
geom_label(aes(y = PW_Cruise, label = sprintf("%0.2f", Clcruise),
colour = "Cruise"), size = rel(3), vjust = 1.5, show.legend = FALSE) +
# Takeoff Labels
geom_label(data = filter(constraint, WS == varWS[3]),
aes(x = WS, y = PW_TOFL, label = sprintf("%0.2f", Clhls),
colour = "Takeoff"), size = rel(3), show.legend = FALSE) +
# OEI Labels
geom_label(data = filter(constraint, WS == varWS[2]),
aes(x = WS, y = PW_Seg2_Climb, label = sprintf("%0.2f", Clhls),
colour = "2nd Segment OEI"), size = rel(3), show.legend = FALSE) +
# Us
geom_point(data = inp, aes(x = WS, y = Pshaft/W, label = "Design")) +
xlab("Wing Loading (N/m^2)") +
ylab("Power Loading (W/N)") +
ggtitle("Constraint Analysis") +
geom_label(x = -Inf, y = Inf, vjust = 1.5, hjust = -0.1,
label = "Constant Cd0, AR, e and eta")
ConstraintPlot
inp
inp$Pshaft/inp$W
ggplot(data = constraint, aes(x = WS, group = Clhls)) +
geom_vline(aes(xintercept = WS_App, colour = "Landing")) +
geom_line(aes(y = PW_TOFL, colour = "Takeoff")) +
geom_line(aes(y = PW_Ceiling_Climb, colour = "Ceiling Climb")) +
geom_line(aes(y = PW_Seg2_Climb, colour = "2nd Segment OEI")) +
geom_line(aes(y = PW_Cruise_Climb, colour = "Cruise Climb")) +
geom_vline(aes(xintercept = WS_Clstar, colour = "Clstar")) +
geom_vline(aes(xintercept = WS_WbW0_Max, colour = "Wb/W0")) +
geom_line(aes(y = PW_Cruise, colour = "Cruise")) +
# Landing Labels
geom_label(aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
geom_label(aes(x = WS_App, y = 12, label = sprintf("%0.2f", Clhls),
colour = "Landing"), size = rel(3), show.legend = FALSE) +
# WbW0 Labels
geom_label(aes(x = WS_WbW0_Max, y = 10, label = sprintf("%0.2f", WbW0_Max),
colour = "Wb/W0"), size = rel(3), show.legend = FALSE) +
# Clstar Labels
geom_label(aes(x = WS_Clstar, y = 14, label = sprintf("Cl*"),
colour = "Clstar"), size = rel(3), show.legend = FALSE) +
# Cruise Labels
geom_point(aes(y = PW_Cruise, colour = "Cruise")) +
geom_label(aes(y = PW_Cruise, label = sprintf("%0.2f", Clcruise),
colour = "Cruise"), size = rel(3), vjust = 1.5, show.legend = FALSE) +
# Takeoff Labels
geom_label(data = filter(constraint, WS == varWS[3]),
aes(x = WS, y = PW_TOFL, label = sprintf("%0.2f", Clhls),
colour = "Takeoff"), size = rel(3), show.legend = FALSE) +
# OEI Labels
geom_label(data = filter(constraint, WS == varWS[2]),
aes(x = WS, y = PW_Seg2_Climb, label = sprintf("%0.2f", Clhls),
colour = "2nd Segment OEI"), size = rel(3), show.legend = FALSE) +
# Us
geom_point(data = inp, aes(x = WS, y = Pshaft/W/etamech, label = "Design")) +
xlab("Wing Loading (N/m^2)") +
ylab("Power Loading (W/N)") +
ggtitle("Constraint Analysis") +
geom_label(x = -Inf, y = Inf, vjust = 1.5, hjust = -0.1,
label = "Constant Cd0, AR, e and eta")
