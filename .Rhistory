Weights_Fraction <- data.frame(
Part = Weights[,1],
General_Aviation = Weights[,2]/as.double(Total_Weights[2]),
Advanced_Composites = Weights[,3]/as.double(Total_Weights[3]))
Weights_Fraction
# Raymer Weights Correlation
Weights <- data.frame(
wing = ((0.036*S_wing^0.758)*W_bat^0.0035*((AR)^0.6)*(q^0.006)*(lambda^0.04)*((100*(t_c))^-0.3)*((N_z*W_dg)^0.49)),
htail = (0.016*(N_z*W_dg)^0.414)*(q^0.168)*(S_HT^0.896)*((100*(t_c))^-0.12)*(AR_HT)^0.043*(lambda^-0.02),
vtail = 0.073*((N_z*W_dg)^0.376)*q^0.122*(S_VT^0.873)*((100*t_c)^-0.49)*((AR_VT)^0.357)*lambda^0.039,
fuselage = 0.052*(S_Fuse^1.086)*((N_z*W_dg)^0.177)*(L_t^-0.051)*(L_D^-0.072)*(q^0.241),
lgmain = (0.095*(N_z*W_dg)^0.768)*(L_m^0.409),
lgnose = (0.125*(N_z*W_dg)^0.566)*(L_n^0.845),
powerplant = 2.575*(W_en^0.922)*2,
batteries = W_bat,
payload = 6*120*kg_to_lb,
controls = 0.053*L_Fuse^1.536*b_wing^0.371*(N_z*W_dg*10^-4)^0.8,
hydraulics = K_h*(W_Fuse^0.8)*(Mach^0.5),
avionics = 2.117*(W_uav)^0.933,
ac_antiice = (0.265*W_dg^0.52)*(6^0.68)*((2.117*(W_uav)^0.933)^0.17)*(Mach^0.08),
furnishings = 0.0582 * W_dg - 65
)
Weights <- Weights %>%
gather(key = Part, value = General_Aviation) %>%
data.frame(., Advanced_Composites = t(Weights * Fudge_Factors))
Total_Weights = data.frame(
Part = "Total",
General_Aviation = sum(Weights[, 2]),
Advanced_Composites = sum(Weights[, 3]))
Weights <- rbind(Weights, Total_Weights)
rownames(Weights) <- NULL
Total_Weights_SI <- data.frame(
Part = Total_Weights[, 1],
Total_Weights[, 2:3] / kg_to_lb) %>%
mutate(Saving = General_Aviation - Advanced_Composites)
Weights_SI <- data.frame(
Part = Weights[,1],
Weights[,2:3]/kg_to_lb)
Weights_Fraction <- data.frame(
Part = Weights[,1],
General_Aviation = Weights[,2]/as.double(Total_Weights[2]),
Advanced_Composites = Weights[,3]/as.double(Total_Weights[3]))
Weights
Weights_Fraction
Weights_Fraction %>% gather(key = Type, value = Value, -Part) %>% unite(Part, c(Part, Type), sep = ".") %>% spread(Part, Value)
Weights_SI
Total_Weights_SI
Total_Weights_SI[2,end]
Total_Weights_SI[2:,]
Total_Weights_SI[end]
Total_Weights_SI[:]
Total_Weights_SI[,2:3]
Total_Weights_SI[,2:4]
set_names(Total_Weights_SI[,2:4], paste("hi"))
rownames(Total_Weights_SI)
colnames(Total_Weights_SI)
set_names(Total_Weights_SI[,2:4], paste(colname(Total_Weights_SI[,2:4])))
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4])))
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"_Total"))
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"_Total", sep=""))
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"Total", sep="_"))
Rowsummary <- cbind(
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"Total", sep="_"))
)
Rowsummary
Weights*Fudge
Weights <- data.frame(
wing = ((0.036*S_wing^0.758)*W_bat^0.0035*((AR)^0.6)*(q^0.006)*(lambda^0.04)*((100*(t_c))^-0.3)*((N_z*W_dg)^0.49)),
htail = (0.016*(N_z*W_dg)^0.414)*(q^0.168)*(S_HT^0.896)*((100*(t_c))^-0.12)*(AR_HT)^0.043*(lambda^-0.02),
vtail = 0.073*((N_z*W_dg)^0.376)*q^0.122*(S_VT^0.873)*((100*t_c)^-0.49)*((AR_VT)^0.357)*lambda^0.039,
fuselage = 0.052*(S_Fuse^1.086)*((N_z*W_dg)^0.177)*(L_t^-0.051)*(L_D^-0.072)*(q^0.241),
lgmain = (0.095*(N_z*W_dg)^0.768)*(L_m^0.409),
lgnose = (0.125*(N_z*W_dg)^0.566)*(L_n^0.845),
powerplant = 2.575*(W_en^0.922)*2,
batteries = W_bat,
payload = 6*120*kg_to_lb,
controls = 0.053*L_Fuse^1.536*b_wing^0.371*(N_z*W_dg*10^-4)^0.8,
hydraulics = K_h*(W_Fuse^0.8)*(Mach^0.5),
avionics = 2.117*(W_uav)^0.933,
ac_antiice = (0.265*W_dg^0.52)*(6^0.68)*((2.117*(W_uav)^0.933)^0.17)*(Mach^0.08),
furnishings = 0.0582 * W_dg - 65
)
Weights*Fudge
rm(Weights)
# Raymer Weights Correlation
WeightsRow <- data.frame(
wing = ((0.036*S_wing^0.758)*W_bat^0.0035*((AR)^0.6)*(q^0.006)*(lambda^0.04)*((100*(t_c))^-0.3)*((N_z*W_dg)^0.49)),
htail = (0.016*(N_z*W_dg)^0.414)*(q^0.168)*(S_HT^0.896)*((100*(t_c))^-0.12)*(AR_HT)^0.043*(lambda^-0.02),
vtail = 0.073*((N_z*W_dg)^0.376)*q^0.122*(S_VT^0.873)*((100*t_c)^-0.49)*((AR_VT)^0.357)*lambda^0.039,
fuselage = 0.052*(S_Fuse^1.086)*((N_z*W_dg)^0.177)*(L_t^-0.051)*(L_D^-0.072)*(q^0.241),
lgmain = (0.095*(N_z*W_dg)^0.768)*(L_m^0.409),
lgnose = (0.125*(N_z*W_dg)^0.566)*(L_n^0.845),
powerplant = 2.575*(W_en^0.922)*2,
batteries = W_bat,
payload = 6*120*kg_to_lb,
controls = 0.053*L_Fuse^1.536*b_wing^0.371*(N_z*W_dg*10^-4)^0.8,
hydraulics = K_h*(W_Fuse^0.8)*(Mach^0.5),
avionics = 2.117*(W_uav)^0.933,
ac_antiice = (0.265*W_dg^0.52)*(6^0.68)*((2.117*(W_uav)^0.933)^0.17)*(Mach^0.08),
furnishings = 0.0582 * W_dg - 65
)
Fudge = Fudge_Factors
Fudge_Factors = c(0.85, 0.83, 0.83, 0.90, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1)
Fudge_Factors = rep(1, 14)
W_est = sum(WeightsRow*Fudge)/kg_to_lb
W_est
Working_SI <- data.frame(
S_wing = S,
P = P,
W_en = W_en / kg_to_lb,
S_HT = S_HT * (ft_to_m)^2,
S_VT = S_VT * (ft_to_m)^2,
S_wet = S_wet * (ft_to_m)^2,
Cd0 = Cd0,
W_bat = W_bat / kg_to_lb
)
Weights <- WeightsRow %>%
gather(key = Part, value = General_Aviation) %>%
data.frame(., Advanced_Composites = t(Weights * Fudge_Factors))
Total_Weights = data.frame(
Part = "Total",
General_Aviation = sum(Weights[, 2]),
Advanced_Composites = sum(Weights[, 3]))
Weights <- rbind(Weights, Total_Weights)
rownames(Weights) <- NULL
Total_Weights_SI <- data.frame(
Part = Total_Weights[, 1],
Total_Weights[, 2:3] / kg_to_lb) %>%
mutate(Saving = General_Aviation - Advanced_Composites)
Weights_SI <- data.frame(
Part = Weights[,1],
Weights[,2:3]/kg_to_lb)
Weights <- WeightsRow %>%
gather(key = Part, value = General_Aviation) %>%
data.frame(., Advanced_Composites = t(WeightsRow * Fudge_Factors))
Total_Weights = data.frame(
Part = "Total",
General_Aviation = sum(Weights[, 2]),
Advanced_Composites = sum(Weights[, 3]))
Weights <- rbind(Weights, Total_Weights)
rownames(Weights) <- NULL
Total_Weights_SI <- data.frame(
Part = Total_Weights[, 1],
Total_Weights[, 2:3] / kg_to_lb) %>%
mutate(Saving = General_Aviation - Advanced_Composites)
Weights_SI <- data.frame(
Part = Weights[,1],
Weights[,2:3]/kg_to_lb)
Weights
# Tabulated Weights Fraction
Weights_Fraction <- data.frame(
Part = Weights[,1],
General_Aviation = Weights[,2]/as.double(Total_Weights[2]),
Advanced_Composites = Weights[,3]/as.double(Total_Weights[3]))
# Row data frame for cbind
Rowsummary <- cbind(
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"Total", sep="_")),
WeightsRow
)
Rowsummary
Weights_Fraction
Weights$Row / W_est
WeightsRow / W_est
W_est
Total_Weights_SI
# Directly Calculated from the Inputs
S = W_dg_SI*9.8065 / WS        # m^2
S_wing = S/(ft_to_m^2)         # ft^2
P = PW * W_dg_SI * 9.8065      # kW
W_dg = W_dg_SI*kg_to_lb        # lb
# Engine sizing
W_en = P/(2 * 260e3) * 50 * kg_to_lb # lb, each engine
# Tail sizing (FIX UP FOR VALUES TO MATCH DANIEL'S VALUES)
S_HT = (0.07 * b_wing * S_wing)/L_t  # ft^2
S_VT = (0.8 * 0.95 / ft_to_m * S_wing)/L_t * 2  # ft^2
# Cd0 estimate (FIX UP FOR WETTED VS THEORETICAL)
S_wet = S_Fuse + S_Eng + 2 * S_wing + 2 * S_HT + 2 * S_VT
K = 1/(pi*AR*e)
Cd0 = 0.0045 * S_wet / S_wing
W_bat = (q_SI  * Cd0 / WS + K / q_SI * WS ) * BatteryFactor * 9.8065 / Etatotal * W_dg
# Raymer Weights Correlation
WeightsRow <- data.frame(
wing = ((0.036*S_wing^0.758)*W_bat^0.0035*((AR)^0.6)*(q^0.006)*(lambda^0.04)*((100*(t_c))^-0.3)*((N_z*W_dg)^0.49)),
htail = (0.016*(N_z*W_dg)^0.414)*(q^0.168)*(S_HT^0.896)*((100*(t_c))^-0.12)*(AR_HT)^0.043*(lambda^-0.02),
vtail = 0.073*((N_z*W_dg)^0.376)*q^0.122*(S_VT^0.873)*((100*t_c)^-0.49)*((AR_VT)^0.357)*lambda^0.039,
fuselage = 0.052*(S_Fuse^1.086)*((N_z*W_dg)^0.177)*(L_t^-0.051)*(L_D^-0.072)*(q^0.241),
lgmain = (0.095*(N_z*W_dg)^0.768)*(L_m^0.409),
lgnose = (0.125*(N_z*W_dg)^0.566)*(L_n^0.845),
powerplant = 2.575*(W_en^0.922)*2,
batteries = W_bat,
payload = 6*120*kg_to_lb,
controls = 0.053*L_Fuse^1.536*b_wing^0.371*(N_z*W_dg*10^-4)^0.8,
hydraulics = K_h*(W_Fuse^0.8)*(Mach^0.5),
avionics = 2.117*(W_uav)^0.933,
ac_antiice = (0.265*W_dg^0.52)*(6^0.68)*((2.117*(W_uav)^0.933)^0.17)*(Mach^0.08),
furnishings = 0.0582 * W_dg - 65
)
Fudge_Factors = c(0.85, 0.83, 0.83, 0.90, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1)
W_est = sum(WeightsRow*Fudge)/kg_to_lb
# Full output in a list
# List of variables used
Working_SI <- data.frame(
S_wing = S,
P = P,
W_en = W_en / kg_to_lb,
S_HT = S_HT * (ft_to_m)^2,
S_VT = S_VT * (ft_to_m)^2,
S_wet = S_wet * (ft_to_m)^2,
Cd0 = Cd0,
W_bat = W_bat / kg_to_lb
)
# Tabulated Weights - Imperial and SI
Weights <- WeightsRow %>%
gather(key = Part, value = General_Aviation) %>%
data.frame(., Advanced_Composites = t(WeightsRow * Fudge_Factors))
Total_Weights = data.frame(
Part = "Total",
General_Aviation = sum(Weights[, 2]),
Advanced_Composites = sum(Weights[, 3]))
Weights <- rbind(Weights, Total_Weights)
rownames(Weights) <- NULL
Total_Weights_SI <- data.frame(
Part = Total_Weights[, 1],
Total_Weights[, 2:3] / kg_to_lb) %>%
mutate(Saving = General_Aviation - Advanced_Composites)
Weights_SI <- data.frame(
Part = Weights[,1],
Weights[,2:3]/kg_to_lb)
# Tabulated Weights Fraction
Weights_Fraction <- data.frame(
Part = Weights[,1],
General_Aviation = Weights[,2]/as.double(Total_Weights[2]),
Advanced_Composites = Weights[,3]/as.double(Total_Weights[3]))
# Row data frame for cbind
Rowsummary <- cbind(
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"Total", sep="_")),
WeightsRow
)
Total_Weights_SI
WeightsRow/W_eset
WeightsRow/W_est
W_est
WeightsRow/kg_to_lb
WeightsRow/kg_to_lb/W_est
Rowsummary <- cbind(
set_names(Total_Weights_SI[,2:4], paste(colnames(Total_Weights_SI[,2:4]),"Total", sep="_")),
WeightsRow/kg_to_lb,
set_names(WeightsRow/kg_to_lb/W_est, paste(colnames(WeightsRow),"Fraction", sep="_"))
)
Rowsummary
Weights_Fraction
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
),
# Determine other values
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = TRUE)
))
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation Graphs.R', echo=TRUE)
Weight_Estimate(WS, PW, MTOM, composite = TRUE, iteration = TRUE)[[1]]
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = TRUE)[[1]]
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE)[[1]]
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = FALSE),
6000, 0.001,0.01, positive = TRUE
)
))
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = FALSE),
6000, 0.001,0.01, positive = TRUE
)
))
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
),
# Determine other values
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
),
# Determine other values
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
Weight_Estimate(weightoptim$WS, weightoptim$PW, weightoptim$MTOM, composite = TRUE, iteration = FALSE)[[1]]
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
# ,
# # Determine other values
# Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
Weight_Estimate(weightoptim$WS, weightoptim$PW, weightoptim$MTOM, composite = TRUE, iteration = FALSE)[[1]]
ggplot(data = weightoptim, aes(x = WS, y = PW)) +
geom_point(aes(colour = MTOM, size = 1/MTOM))
ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..))
c(seq(4000, 7000, 100))
c(seq(4000, 7000, 100), seq(7000, 10000, 250))
ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..),
breaks=c(c(seq(4000, 7000, 100), seq(7000, 10000, 250)))
)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation Graphs.R', echo=TRUE)
v<-ggplot(volcano, aes(x=X1,y=X2,z=value))  # specify the mapping properly
e<-v + stat_contour(aes(colour=..level..), breaks=c(160, 170, 180))
direct.label(e)
install.packages(directlabels)
install.packages("directlabels")
v <- ggplot(volcano3d, aes(x, y, z = z))
library(directlabels)
v2 <- v + stat_contour(aes(colour = ..level..))
direct.label(v2)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation_GOBACK.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Install Packages.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation_GOBACK.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation Graphs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3402-Aircraft-Specifications/Helper Weight Optimisation Graphs.R', echo=TRUE)
direct.label(MTOMcontourplot, method = "bottom.pieces")
library(directlabels)
MTOMcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..),
breaks=c(c(seq(4000, 7000, 100), seq(7000, 10000, 250)))
)
direct.label(MTOMcontourplot, method = "bottom.pieces")
?direct.label
direct.label(MTOMcontourplot, method = "top.pieces")
direct.label(MTOMcontourplot, method = "middle.pieces")
direct.label(MTOMcontourplot, method = "center.pieces")
direct.label(MTOMcontourplot)
direct.label(MTOMcontourplot, method = "top.firstpoints")
direct.label(MTOMcontourplot, method = "angled.firstpoints")
direct.label(MTOMcontourplot, method = "bottom.pieces")
direct.label(MTOMcontourplot, method = "top.pieces")
points <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
geom_point(aes(colour = MTOM, size = 1/MTOM))
MTOMcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..),
breaks=c(c(seq(4000, 8000, 100), seq(7000, 20000, 500)))
)
direct.label(MTOMcontourplot, method = "top.pieces")
MTOMcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..)#,
# breaks=c(c(seq(4000, 8000, 100), seq(7000, 20000, 500)))
)
direct.label(MTOMcontourplot, method = "top.pieces")
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
,
# Determine other values
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
Rowsummary
length(Rowsummary)
rep(NA, 31)
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
# ,
# # Determine other values
# Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
View(weightoptim)
MTOMcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..)#,
# breaks=c(c(seq(4000, 8000, 100), seq(7000, 20000, 500)))
)
direct.label(MTOMcontourplot, method = "top.pieces")
weightoptim %>%
rowwise() %>%
do(data.frame(., Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]))
# Grid of data values
varWS <- seq(1500,3500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
)) %>%
do(data.frame(
.,
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
MTOMcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = MTOM, colour = ..level..)#,
# breaks=c(c(seq(4000, 8000, 100), seq(7000, 20000, 500)))
)
direct.label(MTOMcontourplot, method = "top.pieces")
names(weightoptim)
BatteryFractioncontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = batteries_Fraction, colour = ..level..)
)
direct.label(MTOMcontourplot, method = "top.pieces")
direct.label(BatteryFractioncontourplot, method = "top.pieces")
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..)
)
direct.label(S_wing, method = "top.pieces")
ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..)
)
Swingcontourplot <- ggplot(data = weightoptim, aes(x = WS, y = PW)) +
stat_contour(aes(z = S_wing, colour = ..level..)
)
direct.label(Swingcontourplot, method = "top.pieces")
