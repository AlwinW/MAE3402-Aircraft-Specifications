asdf  <- GroundAcceleration(TO, 40)
asdf$accel
class(asdf$accel)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
GroundAcceleration(TO, 40)
TO
filter(TO, type = "All Engines")
filter(TO, type == "All Engines")
AccelerateStop(TO, 10)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
AccelerateStop(TO, 10)
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 10)[[1]]
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 10)
GroundAcceleration(filter(TO, type == "All Engines"), 10)
GroundAcceleration(filter(TO, type == "All Engines"), 10:15)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]]
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 10)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
AccelerateStop(TO, 10)
GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 10)
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]]
V1 = 10
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]]
integrate(function(V) GroundAcceleration(filter(TO, type == "Rejected Take-off"), V), V1, 0)[[1]]
?integrate
integrate(function(V) Vectorize(GroundAcceleration(filter(TO, type == "Rejected Take-off")), V), V1, 0)[[1]]
integrate(function(V) Vectorize(GroundAcceleration(filter(TO, type == "Rejected Take-off"), V)), V1, 0)[[1]]
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]]
integrate(function(V) GroundAcceleration(filter(TO, type == "Rejected Take-off"), V), 0, V1)[[1]]
integrate(function(V) GroundAcceleration(filter(TO, type == "Rejected Take-Off"), V), 0, V1)[[1]]
AccelerateStop <- function(TO, V1) {
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]] +
V1 * (1) +
integrate(function(V) GroundAcceleration(filter(TO, type == "Rejected Take-Off"), V), V1, 0)[[1]]
}
AccelerateStop(TO, 10)
plot(1:50, AccelerateStop(1:50))
plot(1:50, AccelerateStop(TO, 1:50))
AccelerateStop(TO, 1:50)
GroundAcceleration(filter(TO, type == "Rejected Take-Off"), 10)
GroundAcceleration(filter(TO, type == "Rejected Take-Off"), 1:10)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
GroundAcceleration(filter(TO, type == "Rejected Take-Off"), 1:10)
AccelerateStop(TO, 1:50)
plot(1:50, AccelerateStop(TO, 1:50))
GroundAcceleration(filter(TO, type == "All Engines"), 1:50)
GroundAcceleration(filter(TO, type == "Rejected Take-Off"), 1:50)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
plot(1:50, AccelerateStop(TO, 1:50))
integrate(function(V) GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]]
GroundAcceleration(filter(TO, type == "Rejected Take-Off"), 1:50)
GroundAcceleration(filter(TO, type == "All Engines"), 1:50)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
GroundAcceleration(filter(TO, type == "All Engines"), 1:50)
plot(1:50, AccelerateStop(TO, 1:50))
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
plot(1:50, AccelerateStop(TO, 1:50))
GroundAcceleration(filter(TO, type == "All Engines"), 10, intval = FALSE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
integrate(function(x) x^2 / (coef$A[1] + coef$B[1] * x + coef$C[1] * x^3), 0, V1)[[1]]
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]]
integrate(function(V) Vectorize(V/GroundAcceleration(filter(TO, type == "All Engines"), V)), 0, V1)[[1]]
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 10)[[1]]
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 10)[[1]]
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 5:10)[[1]]
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, 50)[[1]]
integrate(function(V) V/GroundAcceleration(filter(TO, type == "Rejected Take-Off"), V), 50, 0)[[1]]
rm(V1)
AccelerateStop <- function(TO, V1) {
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]] +
V1 * (1) +
integrate(function(V) V/GroundAcceleration(filter(TO, type == "Rejected Take-Off"), V), V1, 0)[[1]]
}
AccelerateStop(TO, 40)
plot(1:50, AccelerateStop(TO, 1:50))
plot(1:50, AccelerateStop(TO, 10))
AccelerateStop(TO, 10)
AccelerateStop(TO, 30)
AccelerateStop(TO, 50)
TO$type
AirDistance
AirDistance["One Engine Down", "Sair"]
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
AccelerateStop(TO, AirDistance, 10, 50)
AccelerateStop(TO, AirDistance, 10, 40)
AccelerateStop(TO, AirDistance, 5, 40)
AccelerateStop(TO, AirDistance, 35, 40)
AccelerateStop(TO, AirDistance, 49, 50)
AccelerateStop(TO, AirDistance, 55, 50)
integrate(function(V) V/GroundAcceleration(filter(TO, type == "One Engine Down"), V), 55, 50)[[1]]
integrate(function(V) V/GroundAcceleration(filter(TO, type == "One Engine Down"), V), 51, 50)[[1]]
AirDistance
1.1 * inp$VsTO
1.2 * inp$VsTO
AccelerateLiftOff <- function(TO, AirDistance, V2) {
(integrate(function(V) V/GroundAcceleration(filter(TO, type == "One Engine Down"), V), 0, V2)[[1]] +
3 * V2 +
AirDistance$Sair[1]) * 1.15
}
AccelerateLiftOff <- function(TO, AirDistance, V2) {
(integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V2)[[1]] +
3 * V2 +
AirDistance$Sair[1]) * 1.15
}
AccelerateLiftOff(TO, AirDistance, 50)
AccelerateContinue(TO, AirDistance, V2, V2)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
AccelerateContinue(TO, AirDistance, V2, V2)
AccelerateContinue <- function(TO, AirDistance, V1, V2) {
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]] +
integrate(function(V) V/GroundAcceleration(filter(TO, type == "One Engine Down"), V), V1, V2)[[1]] +
V2 * (3) +
AirDistance$Sair[2]
}
AccelerateContinue(TO, AirDistance, 50, 50)
AccelerateContinue(TO, AirDistance, 49.9999, 50)
(AccelerateContinue(TO, AirDistance, V2, V2) < AccelerateStop(TO, V2))
V2 = 1.1 * inp$VsTO
(AccelerateContinue(TO, AirDistance, V2, V2) < AccelerateStop(TO, V2))
AccelerateContinue
AccelerateStop
## Takeoff Helper Functions ======================================================================
# Accelerate to V1 then brake to stop
AccelerateStop <- function(TO, V1) {
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]] +
V1 * (1) +
integrate(function(V) V/GroundAcceleration(filter(TO, type == "Rejected Take-Off"), V), V1, 0)[[1]]
}
# Accelerate to V1 then continue after engine failure to V2 + 3 seconds reaction + air distance
AccelerateContinue <- function(TO, AirDistance, V1, V2) {
integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V1)[[1]] +
integrate(function(V) V/GroundAcceleration(filter(TO, type == "One Engine Down"), V), V1, V2)[[1]] +
V2 * (3) +
AirDistance$Sair[2]
}
# Accelerate to V2 + 3 seconds reaction + air distance * Safety Factor
AccelerateLiftOff <- function(TO, AirDistance, V2) {
(integrate(function(V) V/GroundAcceleration(filter(TO, type == "All Engines"), V), 0, V2)[[1]] +
3 * V2 +
AirDistance$Sair[1]) * 1.15
}
(AccelerateContinue(TO, AirDistance, V2, V2) < AccelerateStop(TO, V2))
AccelerateContinue(TO, AirDistance, V2, V2)
AccelerateStop(TO, V2)
AccelerateStop(TO, 40)
(AccelerateContinue(TO, AirDistance, 40, 50)
)
V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE)
V1
V2
V1
V2
AccelerateContinue(TO, AirDistance, V1, V2)
AccelerateStop(TO, V1)
V2 = 10
V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE)
?try
try(V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE))
try(V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
hi = try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
hi
V2 = 1.1 * inp$VsTO
hi = try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
hi
class(hi[[1]])
V2 = 10
hi = try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
hi
class(hi[[1]])
#--- Test if the graphs will cross over before V2
test <- try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
if (is.numeric(test))
V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE)
V1
V2 = 20
#--- Test if the graphs will cross over before V2
test <- try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
if (is.numeric(test))
V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE)
V1
?integrate
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
V1
test
V2 = 15
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
test
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
TakeOffLength(inp)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
TakeOffLength(inp)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
TakeOffLength(inp)
varVinf = seq(0, max(ouput$V1, output$V2), len = 20)
output <- data.frame(
V1 = V1,
V2 = V2,
BFL = BFL,
NTO = AccelerateLiftOff(TO, AirDistance, V2)
) %>%
mutate(
NTOgr = NTO - AirDistance$Sair[1],
TakeOffLength = max(BFL*as.numeric(V1 <= V2), NTO)
)
source('~/Git/MAE3402 Aircraft Specifications/Helper Initial Values.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Install Packages.R', echo=TRUE)
source("Helper Aerodynamic Functions")
source("Helper Aerodynamic Functions.R")
source("Helper Initial Values.R")
#--- Set up the initial parameters to solve for
TO <- RepeatRows(inp, 3)
TO$segment <- "Takeoff"
TO$type <- c("All Engines", "One Engine Down", "Rejected Take-Off")
TO$Ne <- c(2, 1, 0)
TO$mu <- c(
as.double(groundmu["Dry Concrete", "brakesoff"]),
as.double(groundmu["Dry Concrete", "brakesoff"]),
as.double(groundmu["Dry Concrete", "brakeson"])
)
#---- Determine aerodynamic parameters
TO <- mutate(TO, h = 0) %>%
StandardAtomsphere(.) %>%
mutate(
Cd0 = Cd0clean + Cd0lg + Cd0flaps + Cdiflaps,
Cd0 = Cd0 + as.numeric(Ne == 1) * Cd0propfea + as.numeric(Ne == 0) * 2 * Cd0propunfea,
Cl = Cl0 + Clflaps
)
#--- Determine the AirDistance in each case
AirDistance <- TO %>%
filter(type %in% c("All Engines", "One Engine Down")) %>%
mutate(ClTR = Clclean + Clflaps,
VTR = VsTO * 1.15,
etaprop = etaprop(VTR),
PA = PA(Pshafteng, Ne, VTR),
TA = PA / VTR,
qinf = 1/2 * rho * VTR^2,
Cd = Cd0 + K * ClTR^2,
D = qinf * S * Cd,
L = qinf * S * ClTR) %>%
rowwise() %>%
mutate(
R = (VTR) ^ 2 / (0.2 * g),
gamma = ClimbRatesFunction(PA, Cd0, rho, VTR, S, K, W)[[1]] * pi / 180,
hTR = R * (1 - cos(gamma)),
ST = R * (sin(gamma)),
SC = (Hobs - hTR) / tan(gamma),
Sair = ifelse(SC >0, ST + SC, sqrt(R^2 - (R-hTR)^2))
)%>%
ungroup()
AirDistance <- data.frame(select(AirDistance, type, R, gamma, hTR, ST, SC, Sair))
#--- Calculate the other TO parameters and find V1
TO <- TO %>%
mutate(
K = Keff(K, hground, b),
Cd = Cd0 + K * Cl^2
)
V2 = 1.1 * inp$VsTO
#--- Test if the graphs will cross over before V2
BFL <- try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
if (is.numeric(BFL)){
V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE)
BFL = AccelerateContinue(TO, AirDistance, V1, V2)
} else {
V1 = NA
BFL = 0
}
#--- Output the results
output <- data.frame(
V1 = V1,
V2 = V2,
BFL = BFL,
NTO = AccelerateLiftOff(TO, AirDistance, V2)
) %>%
mutate(
NTOgr = NTO - AirDistance$Sair[1],
TakeOffLength = max(BFL*as.numeric(V1 <= V2), NTO)
)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
#--- Set up the initial parameters to solve for
TO <- RepeatRows(inp, 3)
TO$segment <- "Takeoff"
TO$type <- c("All Engines", "One Engine Down", "Rejected Take-Off")
TO$Ne <- c(2, 1, 0)
TO$mu <- c(
as.double(groundmu["Dry Concrete", "brakesoff"]),
as.double(groundmu["Dry Concrete", "brakesoff"]),
as.double(groundmu["Dry Concrete", "brakeson"])
)
#---- Determine aerodynamic parameters
TO <- mutate(TO, h = 0) %>%
StandardAtomsphere(.) %>%
mutate(
Cd0 = Cd0clean + Cd0lg + Cd0flaps + Cdiflaps,
Cd0 = Cd0 + as.numeric(Ne == 1) * Cd0propfea + as.numeric(Ne == 0) * 2 * Cd0propunfea,
Cl = Cl0 + Clflaps
)
#--- Determine the AirDistance in each case
AirDistance <- TO %>%
filter(type %in% c("All Engines", "One Engine Down")) %>%
mutate(ClTR = Clclean + Clflaps,
VTR = VsTO * 1.15,
etaprop = etaprop(VTR),
PA = PA(Pshafteng, Ne, VTR),
TA = PA / VTR,
qinf = 1/2 * rho * VTR^2,
Cd = Cd0 + K * ClTR^2,
D = qinf * S * Cd,
L = qinf * S * ClTR) %>%
rowwise() %>%
mutate(
R = (VTR) ^ 2 / (0.2 * g),
gamma = ClimbRatesFunction(PA, Cd0, rho, VTR, S, K, W)[[1]] * pi / 180,
hTR = R * (1 - cos(gamma)),
ST = R * (sin(gamma)),
SC = (Hobs - hTR) / tan(gamma),
Sair = ifelse(SC >0, ST + SC, sqrt(R^2 - (R-hTR)^2))
)%>%
ungroup()
AirDistance <- data.frame(select(AirDistance, type, R, gamma, hTR, ST, SC, Sair))
#--- Calculate the other TO parameters and find V1
TO <- TO %>%
mutate(
K = Keff(K, hground, b),
Cd = Cd0 + K * Cl^2
)
V2 = 1.1 * inp$VsTO
#--- Test if the graphs will cross over before V2
BFL <- try(ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE), silent = TRUE)
if (is.numeric(BFL)){
V1 = ModifiedSecant(function(V1) AccelerateContinue(TO, AirDistance, V1, V2) - AccelerateStop(TO, V1),
V2, 0.01, 1e-4, positive = TRUE)
BFL = AccelerateContinue(TO, AirDistance, V1, V2)
} else {
V1 = NA
BFL = 0
}
#--- Output the results
output <- data.frame(
V1 = V1,
V2 = V2,
BFL = BFL,
NTO = AccelerateLiftOff(TO, AirDistance, V2)
) %>%
mutate(
NTOgr = NTO - AirDistance$Sair[1],
TakeOffLength = max(BFL*as.numeric(V1 <= V2), NTO)
)
varVinf = seq(0, max(ouput$V1, output$V2), len = 20)
varVinf = seq(0, max(output$V1, output$V2), len = 20)
varVinf
rm(output)
TOoutput <- data.frame(
V1 = V1,
V2 = V2,
BFL = BFL,
NTO = AccelerateLiftOff(TO, AirDistance, V2)
) %>%
mutate(
NTOgr = NTO - AirDistance$Sair[1],
TakeOffLength = max(BFL*as.numeric(V1 <= V2), NTO)
)
varVinf = seq(0, max(TOoutput$V1, TOoutput$V2), len = 20)
source('~/Git/MAE3402 Aircraft Specifications/Helper Main Calculation Functions.R', echo=TRUE)
TakeOffLength(inp)
TakeOffLength(inp, 30)
TO
RepeatRows(TO, 3)
V1 = seq(0, max(TOoutput$V1, TOoutput$V2), len = 20)
?apply
AccelerateStop
TOplotdata <- data.frame(
V1 = seq(0, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, V1)
))
AccelerateStop(TO, V1)
AccelerateStop(TO, 30)
TOplotdata <- data.frame(
V1 = seq(0, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2)
TOplotdata
TOplotdata <- data.frame(
V1 = seq(0, 30, len = 20),
V2 = TOoutput$V2)
TOplotdata <- data.frame(
V1 = seq(0, max(0, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, V1)
))
TOplotdata <- data.frame(
V1 = seq(0, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1)
))
TOplotdata <- data.frame(
V1 = seq(0, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1)
))
TO
V1
TOplotdata <- data.frame(
V1 = seq(0.1, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1)
))
TOplotdata <- data.frame(
V1 = seq(0.1, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1)
))
TOplotdata
TOplotdata <- data.frame(
V1 = seq(0.00001, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1),
AccelerateContinue = AccelerateContinue(TO, AirDistance, .$V1, .$V2)
))
TOplotdata
TOplotdata <- data.frame(
V1 = seq(0.00001, max(TOoutput$V1, TOoutput$V2), len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1),
AccelerateContinue = AccelerateContinue(TO, AirDistance, .$V1, .$V2),
AccelerateLiftOff = AccelerateLiftOff(TO, AirDistance, .$V1)
))
TOplotdata
ggplot(TOplotdata) + geom_point(aes(x = V1, y = AccelerateStop)) + geom_point(aes(x = V1, y = AccelerateContinue)) + geom_point(aes(x = V1, y = AccelerateLiftOff))
inp
ggplot(data = TOplotdata, aes(x = V1)) +
geom_hline(yintercept = inp$Srun, colour = "Max Paved Runway") +
geom_line(aes(y = AccelerateStop, colour = "Accelerate-Stop")) +
geom_line(aes(y = AccelerateContinue, colour = "Accelerate-Continue"))
ggplot(data = TOplotdata, aes(x = V1)) +
geom_hline(yintercept = inp$Srun, aes(colour = "Max Paved Runway")) +
geom_line(aes(y = AccelerateStop, colour = "Accelerate-Stop")) +
geom_line(aes(y = AccelerateContinue, colour = "Accelerate-Continue"))
TOplotdata <- data.frame(
V1 = seq(0.00001, max(TOoutput$V1, TOoutput$V2)*1.1, len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1),
AccelerateContinue = AccelerateContinue(TO, AirDistance, .$V1, .$V2)
))
TOplotout <- ggplot(data = TOplotdata, aes(x = V1)) +
geom_hline(yintercept = inp$Srun, aes(colour = "Max Paved Runway")) +
geom_line(aes(y = AccelerateStop, colour = "Accelerate-Stop")) +
geom_line(aes(y = AccelerateContinue, colour = "Accelerate-Continue"))
TOplotout
TOplotdata <- data.frame(
V1 = seq(0.00001, max(TOoutput$V1, TOoutput$V2)*1.02, len = 20),
V2 = TOoutput$V2) %>%
rowwise() %>%
do(data.frame(
.,
AccelerateStop = AccelerateStop(TO, .$V1),
AccelerateContinue = AccelerateContinue(TO, AirDistance, .$V1, .$V2)
))
TOplotout <- ggplot(data = TOplotdata, aes(x = V1)) +
geom_hline(yintercept = inp$Srun, aes(colour = "Max Paved Runway")) +
geom_line(aes(y = AccelerateStop, colour = "Accelerate-Stop")) +
geom_line(aes(y = AccelerateContinue, colour = "Accelerate-Continue"))
TOplotout
