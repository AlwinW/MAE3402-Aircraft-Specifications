L_D = 19 # (L/D)
Mach = 0.25
q = 0.5*17.56*10^-4*(0.25*1078)^2 # lb/ft^2
q_SI = 1/2 * 0.9046291 * 82.09822^2 # Pa
#--- Calculations
# Directly Calculated from the Inputs
S = W_dg_SI*9.8065 / WS        # m^2
S_wing = S/(ft_to_m^2)         # ft^2
P = PW * W_dg_SI * 9.8065      # kW
W_dg = W_dg_SI*kg_to_lb        # lb
# Engine sizing (engine + gearbox)
W_en = P/(2 * 260e3) * (50 + 15) * kg_to_lb # lb, each engine
# Tail sizing (FIX UP FOR VALUES TO MATCH DANIEL'S VALUES)
S_HT = (0.07 * b_wing * S_wing)/L_t  # ft^2
S_VT = (0.8 * 0.95 / ft_to_m * S_wing)/L_t * 2  # ft^2
# Cd0 estimate (FIX UP FOR WETTED VS THEORETICAL)
S_wet = S_Fuse + S_Eng + 2 * S_wing + 2 * S_HT + 2 * S_VT
K = 1/(pi*AR*e)
Cd0 = 0.0045 * S_wet / S_wing
W_bat = (q_SI  * Cd0 / WS + K / q_SI * WS ) * BatteryFactor * 9.8065 / Etatotal * W_dg
S_HT
S_VT
S_HT = (0.07 * b_wing * S_wing)/L_t * ft_to_m^2 # ft^2
S_HT
S_VT = (0.8 * 0.95 / ft_to_m * S_wing)/L_t * 2 *ft_to_m^2  # ft^2
S_VT
S_VT = (0.8 * 1.17456 / ft_to_m * S_wing)/L_t * 2 *ft_to_m^2  # ft^2
S_VT
6.35/12
L_t = 0.53*L_Fuse     # ft, wing to tail length
S_HT = (0.07 * b_wing * S_wing)/L_t * ft_to_m^2 # ft^2
S_VT = (0.8 * 1.17456 / ft_to_m * S_wing)/L_t * 2 *ft_to_m^2  # ft^2
S_HT
S_VT
source('~/Git/MAE3402 Aircraft Specifications/Helper Weight Optimisation.R', echo=TRUE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 20, BatteryFactor = 1.05)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 20, BatteryFactor = 1.03)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 20, BatteryFactor = 1.0)
source('~/Git/MAE3402 Aircraft Specifications/Helper Weight Optimisation.R', echo=TRUE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 20, BatteryFactor = 1.03)
source('~/Git/MAE3402 Aircraft Specifications/Helper Weight Optimisation.R', echo=TRUE)
inp$etamech*etaprop(inp$Vcruise)
source('~/Git/MAE3402 Aircraft Specifications/Helper Weight Optimisation.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Weight Optimisation.R', echo=TRUE)
source('~/Git/MAE3402 Aircraft Specifications/Helper Weight Optimisation.R', echo=TRUE)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 20, BatteryFactor = 1.03)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 15, BatteryFactor = 1.03)
Weight_Estimate(WS, PW, W_dg_SI, composite = TRUE, iteration = FALSE,
AR = 20, BatteryFactor = 1.03)
varWS <- seq(1500,5500, length.out = 21)
varPW <- seq(0, 30, length.out = 21)
weightoptim <- expand.grid(WS = varWS, PW = varPW)
weightoptim <- weightoptim %>%
rowwise() %>%
do(data.frame(
# Previous WS and PW values
.,
# Determine MTOM
MTOM = ModifiedSecant(
function(W_dg_SI)
W_dg_SI - Weight_Estimate(.$WS, .$PW, W_dg_SI, composite = TRUE, iteration = TRUE),
6000, 0.001,0.01, positive = TRUE
)
)) %>%
do(data.frame(
.,
Weight_Estimate(.$WS, .$PW, .$MTOM, composite = TRUE, iteration = FALSE)[[1]]
))
weightoptim <- data.frame(weightoptim)
weightoptim
?outer
outer(varWS, varPW, "^")
library(lattice)
MTOMlattice <- weightoptim %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS,varPW,asdf,nlevels=9,col=brewer.pal(9,"YlOrRd"))
filled.contour(varWS,varPW,asdf,nlevels=9,col=brewer.pal(9,"YlOrRd"))
MTOMlattice <- weightoptim %>%
filter(MTOM < 12000) %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS,varPW,asdf,nlevels=9,col=brewer.pal(9,"YlOrRd"))
MTOMlattice <- weightoptim %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS,varPW,asdf,nlevels=9,col=brewer.pal(9,"YlOrRd"))
library(MASS)
data.x <- runif(50);
data.v1 <- runif(50);
x <- matrix(rep(0:50/50,51),nrow=51,ncol=51);
y <- t(x);
theta <- 50;
x0 = 0.2; y0 = 0.5;
z <- abs(sqrt(((x-x0)*cos(theta)+(y-y0)*sin(theta))^2 + ((y-y0)*cos(theta)+(x-    x0)*sin(theta))^2)-1);
Palette <- colorRampPalette(c("lightgrey","black"),
interpolate="spline" )
Levels <- (0.1*(0:10))
pt.color <- "black";
filled.contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,
xlim=c(0,1),ylim=c(0,1),
color.palette=Palette, xlab="X",ylab="V",
plot.axes={axis(1);axis(2);
points(data.x,data.v1,pch=19,col=pt.color, cex=.5);
contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,lwd=1.5,labcex=1.5,
lty=0,col=grey(0.2),add=TRUE, method="flattest"
);
}
)
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
})
filled.contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,
xlim=c(0,1),ylim=c(0,1),
color.palette=Palette, xlab="X",ylab="V",
plot.axes={axis(1);axis(2);
# points(data.x,data.v1,pch=19,col=pt.color, cex=.5);
contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
# contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,lwd=1.5,labcex=1.5,
#         lty=0,col=grey(0.2),add=TRUE, method="flattest"
# );
}
)
filled.contour(x=0:50/50,y=0:50/50,z=z,nlevels = 10,
xlim=c(0,1),ylim=c(0,1),
color.palette=Palette, xlab="X",ylab="V",
plot.axes={axis(1);axis(2);
# points(data.x,data.v1,pch=19,col=pt.color, cex=.5);
contour(x=0:50/50,y=0:50/50,z=z,nlevels = 10,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
# contour(x=0:50/50,y=0:50/50,z=z,levels=Levels,lwd=1.5,labcex=1.5,
#         lty=0,col=grey(0.2),add=TRUE, method="flattest"
# );
}
)
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
axes = {
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="", method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="  ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=grey(0.2),add=TRUE, method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="    ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=grey(0.2),add=TRUE, method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="      ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=grey(0.2),add=TRUE, method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="      ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=pt.color,add=TRUE, method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=grey(0.5),lwd=1.5,add=TRUE, labels="      ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=pt.color,add=TRUE, method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=pt.color,lwd=1.5,add=TRUE, labels="      ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=pt.color,add=TRUE, method="flattest"
);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {axis(1); axis(2);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,labcex=1.5,
col=pt.color,lwd=1.5,add=TRUE, labels="      ", method="flattest"
);
contour(x=varWS,y=varPW,z=asdf,nlevels=9,lwd=1.5,labcex=1.5,
lty=0,col=pt.color,add=TRUE, method="flattest"
);
points(2000, 10);
})
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
drawlabels = TRUE)
filled.contour
?filled.contour
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = contour(x,y,z, nlevels = 20,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE))
filled.contour(varWS, varPW, asdf, nlevels=9, col=brewer.pal(9,"YlOrRd"),
plot.axes = contour(varWS, varPW, asdf, nlevels = 20,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE))
?points
?lines
plot(cars, main = "Stopping Distance versus Speed")
lines(stats::lowess(cars))
stats::lowess(cars)
filled.contour(varWS, varPW, asdf, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf, nlevels = 9,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = TRUE,
frame.plot = TRUE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = TRUE,
frame.plot = TRUE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
contour(varWS, varPW, asdf,
drawlabels = TRUE, axes = FALSE,
frame.plot = FALSE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
})
MTOMlattice <- weightoptim %>%
mutate(ifelse(MTOM > 12000, 12000, MTOM)) %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
})
asdf
MTOMlattice <- weightoptim %>%
mutate(MTOM = ifelse(MTOM > 12000, 12000, MTOM)) %>%
select(WS, PW, MTOM) %>%
spread(PW, MTOM)
rownames(MTOMlattice) <- MTOMlattice$WS
MTOMlattice <- select(MTOMlattice, -WS)
asdf <- as.matrix(MTOMlattice)
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Maximum Take Off MASS (MTOM)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 11, col=brewer.pal(11,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
brewer.pal.info
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Set3"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"PiYG"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"BrBG"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Spectral"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Paired"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"PuOr"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"RdYlBu"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Purples"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Accent"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"RdBu"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
brewer.pal.info
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Pastel1"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"Pastel2"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
?brewer.pal
filled.contour(varWS, varPW, asdf, nlevels = 9, col=rev(brewer.pal(9,"Spectral")),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
title = "MTOM",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
?title
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
main = "MTOM",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
lines(x = c(2000, 3000), y = c(10, 20))
})
filled.contour(varWS, varPW, asdf, nlevels = 9, col=brewer.pal(9,"YlOrRd"),
xlab="Wing Loading (WS)",ylab="Power Loading (PW)",
main = "Maximum Take Off Mass (MTOM)",
# plot.title = "MTOM",
plot.axes = {
axis(1); axis(2);
contour(varWS, varPW, asdf,
drawlabels = TRUE, add = TRUE);
points(2000, 10);
lines(x = c(2000, 3000), y = c(10, 20))
})
